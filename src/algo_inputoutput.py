# Input-output formalism
# All equations are taken from input-output-formalism.nb
# note: m>0 for all functions below!

import numpy as np
import math
from scipy.constants import Planck

def simplified_coeffs(iac,Omega,Gm,kext,ktot,Sin,Delta=0,m=1,a0_calc=False):
    # simplified coefficients without higher order approximations
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    amm = (a0 * Gm * iac**m)/(2**(m-1)*(-1j*ktot + 2*(Delta-m*Omega)))
    apm = (a0 * Gm * iac**m)/(2**(m-1)*(-1j*ktot + 2*(Delta+m*Omega)))
    return amm, apm

def first_order_coeffs(iac, Omega, G1, kext, ktot, Sin, Delta=0, a0_calc=False):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    am1 = (a0 * G1 * iac)/(-1j*ktot + 2*(Delta-Omega))
    ap1 = (a0 * G1 * iac)/(-1j*ktot + 2*(Delta+Omega))
    return am1, ap1


def second_order_coeffs(iac, Omega, G1, G2, kext, ktot, Sin, Delta=0, a0_calc=False):
    am1 = am1_second_order(iac, Omega, G1, G2, kext, ktot, Sin, Delta, a0_calc)
    ap1 = ap1_second_order(iac, Omega, G1, G2, kext, ktot, Sin, Delta, a0_calc)
    am2 = am2_second_order(iac, Omega, G1, G2, kext, ktot, Sin, Delta, a0_calc)
    ap2 = ap2_second_order(iac, Omega, G1, G2, kext, ktot, Sin, Delta, a0_calc)
    return am1, ap1, am2, ap2


def third_order_coeffs(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta=0, a0_calc=False):
    am1 = am1_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc)
    ap1 = ap1_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc)
    am2 = am2_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc)
    ap2 = ap2_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc)
    am3 = am3_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc)
    ap3 = ap3_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc)
    return am1, ap1, am2, ap2, am3, ap3

def c_a0(kext, ktot, Sin, Delta=0, a0_calc=False):
    if type(a0_calc)==bool and a0_calc==False:
        return -2*np.sqrt(kext)*Sin/(ktot+2j*Delta)
    else:
        #in case the alpha_0 was calculated using the Duffing model
        return a0_calc

def nphot_to_a0(nph_int,f_pump):
    return np.sqrt(2*np.pi)*np.sqrt(2*50*nph_int*(Planck*f_pump))

def am1_second_order(iac, Omega, G1, G2, kext, ktot, Sin, Delta, a0_calc):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    k = ktot
    aux0=(G1**2)*((iac**2)*((-4.*Delta)+((G2*(iac**2))+(((0.+2.j)*k)+(8.*Omega)))))
    aux1=((0.+1.j)*(k*((8.*Delta)+Omega)))+(-2.*((4.*(Delta**2))+((Delta*Omega)+(-6.*(Omega**2)))))
    aux2=(Delta**3.)+(((Delta**2)*Omega)+((-4.*(Delta*(Omega**2)))+(-4.*(Omega**3.))))
    aux3=(-4.*(k*((3.*(Delta**2))+((2.*(Delta*Omega))+(-4.*(Omega**2))))))+((0.+-8.j)*aux2)
    aux4=(4.*(G2*((iac**2)*((2.*(k**2))+aux1))))+((0.+4.j)*((k**3.)+(((0.+2.j)*((k**2)*((3.*Delta)+Omega)))+aux3)))
    aux5=((G2**2)*((iac**4.)*((10.*Delta)+(((0.+-5.j)*k)+(-8.*Omega)))))+((2.*aux0)+aux4)
    aux6=((0.+-4.j)*(Delta*k))+(((0.+2.j)*(G2*((iac**2)*(((0.+2.j)*Delta)+k))))+(8.*(Omega**2)))
    aux7=(G1**2)*((iac**2)*(((4.*(Delta**2))+(((G2**2)*(iac**4.))+aux6))-(k**2)))
    aux8=((2.*Delta)+((0.+-1.j)*k))*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(10.*(Omega**2)))))
    aux9=((0.+-16.j)*(k*((2.*(Delta**3.))+(-5.*(Delta*(Omega**2))))))+(16.*((Delta**4.)+((-5.*((Delta**2)*(Omega**2)))+(4.*(Omega**4.)))))
    aux10=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((-4.*((k**2)*((6.*(Delta**2))+(-5.*(Omega**2)))))+aux9))
    aux11=((0.+14.j)*((G2**3.)*((iac**6.)*(((0.+2.j)*Delta)+k))))+((-8.*aux7)+((16.*(G2*((iac**2)*aux8)))+(4.*aux10)))
    aux12=(-92.*(Delta**2))+(((0.+92.j)*(Delta*k))+((23.*(k**2))+(64.*(Omega**2))))
    aux13=((4.*((G1**4.)*(iac**4.)))+((3.*((G2**4.)*(iac**8.)))+aux11))-((G2**2)*((iac**4.)*aux12))
    output=(a0*(G1*(iac*(aux5-((G2**3.)*(iac**6.))))))/aux13
    return output


def ap1_second_order(iac, Omega, G1, G2, kext, ktot, Sin, Delta, a0_calc):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    k = ktot
    aux0=(G1**2)*((iac**2)*((-4.*Delta)+((G2*(iac**2))+(((0.+2.j)*k)+(-8.*Omega)))))
    aux1=((0.+1.j)*(k*((8.*Delta)-Omega)))+((2.*(Delta*Omega))+(12.*(Omega**2)))
    aux2=((Delta**3.)+((-4.*(Delta*(Omega**2)))+(4.*(Omega**3.))))-((Delta**2)*Omega)
    aux3=((0.+-4.j)*(k*((3.*(Delta**2))+((-2.*(Delta*Omega))+(-4.*(Omega**2))))))+(8.*aux2)
    aux4=(4.*(G2*((iac**2)*((-8.*(Delta**2))+((2.*(k**2))+aux1)))))+(4.*(((0.+1.j)*(k**3.))+(((k**2)*((-6.*Delta)+(2.*Omega)))+aux3)))
    aux5=(2.*aux0)+(((G2**2)*((iac**4.)*((10.*Delta)+(((0.+-5.j)*k)+(8.*Omega)))))+aux4)
    aux6=((0.+-4.j)*(Delta*k))+(((0.+2.j)*(G2*((iac**2)*(((0.+2.j)*Delta)+k))))+(8.*(Omega**2)))
    aux7=(G1**2)*((iac**2)*(((4.*(Delta**2))+(((G2**2)*(iac**4.))+aux6))-(k**2)))
    aux8=((2.*Delta)+((0.+-1.j)*k))*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(10.*(Omega**2)))))
    aux9=((0.+-16.j)*(k*((2.*(Delta**3.))+(-5.*(Delta*(Omega**2))))))+(16.*((Delta**4.)+((-5.*((Delta**2)*(Omega**2)))+(4.*(Omega**4.)))))
    aux10=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((-4.*((k**2)*((6.*(Delta**2))+(-5.*(Omega**2)))))+aux9))
    aux11=((0.+14.j)*((G2**3.)*((iac**6.)*(((0.+2.j)*Delta)+k))))+((-8.*aux7)+((16.*(G2*((iac**2)*aux8)))+(4.*aux10)))
    aux12=(-92.*(Delta**2))+(((0.+92.j)*(Delta*k))+((23.*(k**2))+(64.*(Omega**2))))
    aux13=((4.*((G1**4.)*(iac**4.)))+((3.*((G2**4.)*(iac**8.)))+aux11))-((G2**2)*((iac**4.)*aux12))
    output=(a0*(G1*(iac*(aux5-((G2**3.)*(iac**6.))))))/aux13
    return output


def am2_second_order(iac, Omega, G1, G2, kext, ktot, Sin, Delta, a0_calc):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    k=ktot
    aux0=((0.+2.j)*(k*((2.*Delta)+(3.*Omega))))+(-4.*((Delta**2)+((3.*(Delta*Omega))+(2.*(Omega**2)))))
    aux1=(4.*(G2*((iac**2)*((4.*Delta)+(((0.+-2.j)*k)+(3.*Omega))))))+(4.*((k**2)+aux0))
    aux2=((0.+4.j)*(k*((3.*Delta)+(2.*Omega))))+(4.*((-3.*(Delta**2))+((-4.*(Delta*Omega))+(Omega**2))))
    aux3=((Delta**3.)+((2.*((Delta**2)*Omega))+(-2.*(Omega**3.))))-(Delta*(Omega**2))
    aux4=(-4.*(k*(((3.*(Delta**2))+(4.*(Delta*Omega)))-(Omega**2))))+((0.+-8.j)*aux3)
    aux5=(4.*(G2*((iac**2)*((3.*(k**2))+aux2))))+((0.+4.j)*((k**3.)+(((0.+2.j)*((k**2)*((3.*Delta)+(2.*Omega))))+aux4)))
    aux6=(-3.*((G2**3.)*(iac**6.)))+(((G2**2)*((iac**4.)*((22.*Delta)+(((0.+-11.j)*k)+(12.*Omega)))))+aux5)
    aux7=(-8.*((G1**4.)*(iac**2)))+((-2.*((G1**2)*((-5.*((G2**2)*(iac**4.)))+aux1)))+(G2*aux6))
    aux8=((0.+-4.j)*(Delta*k))+(((0.+2.j)*(G2*((iac**2)*(((0.+2.j)*Delta)+k))))+(8.*(Omega**2)))
    aux9=(G1**2)*((iac**2)*(((4.*(Delta**2))+(((G2**2)*(iac**4.))+aux8))-(k**2)))
    aux10=((2.*Delta)+((0.+-1.j)*k))*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(10.*(Omega**2)))))
    aux11=(-92.*(Delta**2))+(((0.+92.j)*(Delta*k))+((23.*(k**2))+(64.*(Omega**2))))
    aux12=((0.+-16.j)*(k*((2.*(Delta**3.))+(-5.*(Delta*(Omega**2))))))+(16.*((Delta**4.)+((-5.*((Delta**2)*(Omega**2)))+(4.*(Omega**4.)))))
    aux13=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((-4.*((k**2)*((6.*(Delta**2))+(-5.*(Omega**2)))))+aux12))
    aux14=(32.*(G2*((iac**2)*aux10)))+((-2.*((G2**2)*((iac**4.)*aux11)))+(8.*aux13))
    aux15=((0.+28.j)*((G2**3.)*((iac**6.)*(((0.+2.j)*Delta)+k))))+((-16.*aux9)+aux14)
    output=(a0*((iac**2)*aux7))/((8.*((G1**4.)*(iac**4.)))+((6.*((G2**4.)*(iac**8.)))+aux15))
    return output


def ap2_second_order(iac, Omega, G1, G2, kext, ktot, Sin, Delta, a0_calc):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    k=ktot
    aux0=((0.+4.j)*(Delta*k))+((k**2)+((12.*(Delta*Omega))+(((0.+-6.j)*(k*Omega))+(-8.*(Omega**2)))))
    aux1=(8.*(G2*((iac**2)*((-4.*Delta)+(((0.+2.j)*k)+(3.*Omega))))))+(-8.*((-4.*(Delta**2))+aux0))
    aux2=((0.+4.j)*(k*((3.*Delta)+(-2.*Omega))))+(4.*((-3.*(Delta**2))+((4.*(Delta*Omega))+(Omega**2))))
    aux3=((Delta**3.)+((-2.*((Delta**2)*Omega))+(2.*(Omega**3.))))-(Delta*(Omega**2))
    aux4=((0.+-4.j)*(k*(((3.*(Delta**2))+(-4.*(Delta*Omega)))-(Omega**2))))+(8.*aux3)
    aux5=(4.*(G2*((iac**2)*((3.*(k**2))+aux2))))+(4.*(((0.+1.j)*(k**3.))+(((k**2)*((-6.*Delta)+(4.*Omega)))+aux4)))
    aux6=(-3.*((G2**3.)*(iac**6.)))+(((G2**2)*((iac**4.)*((22.*Delta)+(((0.+-11.j)*k)+(-12.*Omega)))))+aux5)
    aux7=(-8.*((G1**4.)*(iac**2)))+(((G1**2)*((10.*((G2**2)*(iac**4.)))+aux1))+(G2*aux6))
    aux8=((0.+-4.j)*(Delta*k))+(((0.+2.j)*(G2*((iac**2)*(((0.+2.j)*Delta)+k))))+(8.*(Omega**2)))
    aux9=(G1**2)*((iac**2)*(((4.*(Delta**2))+(((G2**2)*(iac**4.))+aux8))-(k**2)))
    aux10=((2.*Delta)+((0.+-1.j)*k))*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(10.*(Omega**2)))))
    aux11=(-92.*(Delta**2))+(((0.+92.j)*(Delta*k))+((23.*(k**2))+(64.*(Omega**2))))
    aux12=((0.+-16.j)*(k*((2.*(Delta**3.))+(-5.*(Delta*(Omega**2))))))+(16.*((Delta**4.)+((-5.*((Delta**2)*(Omega**2)))+(4.*(Omega**4.)))))
    aux13=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((-4.*((k**2)*((6.*(Delta**2))+(-5.*(Omega**2)))))+aux12))
    aux14=(32.*(G2*((iac**2)*aux10)))+((-2.*((G2**2)*((iac**4.)*aux11)))+(8.*aux13))
    aux15=((0.+28.j)*((G2**3.)*((iac**6.)*(((0.+2.j)*Delta)+k))))+((-16.*aux9)+aux14)
    output=(a0*((iac**2)*aux7))/((8.*((G1**4.)*(iac**4.)))+((6.*((G2**4.)*(iac**8.)))+aux15))
    return output


def am1_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    k=ktot
    aux0=(iac**6.)*((-26.*Delta)+((3.*(G2*(iac**2)))+(((0.+13.j)*k)+(-56.*Omega))))
    aux1=(G1**5.)*((iac**4.)*((G2*(iac**2))+(((0.+4.j)*k)+(-8.*(Delta+(2.*Omega))))))
    aux2=2.*((G3**2)*((iac**8.)*((-266.*Delta)+(((0.+133.j)*k)+(-610.*Omega)))))
    aux3=(-4.*(k*((3.*(Delta**2))+(Omega**2))))+((0.+-8.j)*((Delta**3.)+((Delta*(Omega**2))+(10.*(Omega**3.)))))
    aux4=(-4.*(Delta*Omega))+((2.*(Omega**2))+((0.+2.j)*(k*((2.*Delta)+Omega))))
    aux5=(iac**4.)*((19.*((G3**2)*(iac**6.)))+(64.*((-4.*(Delta**2))+((k**2)+aux4))))
    aux6=((0.+96.j)*((iac**2)*(((0.+6.j)*(Delta*(k**2)))+((k**3.)+aux3))))+(3.*(G2*aux5))
    aux7=(16.*((G2**2)*((iac**6.)*((16.*Delta)+(((0.+-8.j)*k)+(23.*Omega))))))+aux6
    aux8=((0.+2.j)*(k*((182.*Delta)+(75.*Omega))))+(-4.*((91.*(Delta**2))+((75.*(Delta*Omega))+(-26.*(Omega**2)))))
    aux9=(0.+-2.j)*(k*((36.*(Delta**2))+((-6.*(Delta*Omega))+(17.*(Omega**2)))))
    aux10=(68.*(Delta*(Omega**2)))+((528.*(Omega**3.))+(((k**2)*((-36.*Delta)+(3.*Omega)))+aux9))
    aux11=(48.*(Delta**3.))+(((0.+6.j)*(k**3.))+((-12.*((Delta**2)*Omega))+aux10))
    aux12=((G3**2)*((iac**6.)*((-334.*Delta)+(((0.+167.j)*k)+(-804.*Omega)))))+(32.*aux11)
    aux13=(G2*((135.*((G3**2)*(iac**8.)))+(16.*((iac**2)*((91.*(k**2))+aux8)))))+(4.*aux12)
    aux14=(8.*((G2**2)*((iac**4.)*((230.*Delta)+(((0.+-115.j)*k)+(324.*Omega))))))+aux13
    aux15=(0.+8.j)*((G2**4.)*((iac**8.)*(((0.+54.j)*Delta)+((27.*k)+((0.+52.j)*Omega)))))
    aux16=(0.+5.j)*((G3**4.)*((iac**12.)*(((0.+82.j)*Delta)+((41.*k)+((0.+204.j)*Omega)))))
    aux17=(0.+-4.j)*(k*((189.*(Delta**2))+((-60.*(Delta*Omega))+(113.*(Omega**2)))))
    aux18=(-30.*((Delta**2)*Omega))+((113.*(Delta*(Omega**2)))+(750.*(Omega**3.)))
    aux19=((k**2)*((-378.*Delta)+(60.*Omega)))+(aux17+(8.*((63.*(Delta**3.))+aux18)))
    aux20=-4.*((k**3.)*((10.*(Delta**2))+((4.*(Delta*Omega))+(-13.*(Omega**2)))))
    aux21=(10.*(Delta**3.))+((6.*((Delta**2)*Omega))+((-39.*(Delta*(Omega**2)))+(-13.*(Omega**3.))))
    aux22=(-39.*((Delta**2)*(Omega**2)))+((-26.*(Delta*(Omega**3.)))+(36.*(Omega**4.)))
    aux23=(-13.*((Delta**2)*(Omega**3.)))+((36.*(Delta*(Omega**4.)))+(36.*(Omega**5.)))
    aux24=(Delta**5.)+(((Delta**4.)*Omega)+((-13.*((Delta**3.)*(Omega**2)))+aux23))
    aux25=(16.*(k*((5.*(Delta**4.))+((4.*((Delta**3.)*Omega))+aux22))))+((0.+32.j)*aux24)
    aux26=((0.+2.j)*((k**4.)*((5.*Delta)+Omega)))+(aux20+(((0.+-8.j)*((k**2)*aux21))+aux25))
    aux27=(0.+4.j)*(k*((75.*(Delta**2))+((26.*(Delta*Omega))+(-70.*(Omega**2)))))
    aux28=(25.*(Delta**3.))+((13.*((Delta**2)*Omega))+((-70.*(Delta*(Omega**2)))+(14.*(Omega**3.))))
    aux29=((0.+-25.j)*(k**3.))+((2.*((k**2)*((75.*Delta)+(13.*Omega))))+(aux27+(-8.*aux28)))
    aux30=(17.*((G3**2)*((iac**6.)*((8.*Delta)+(((0.+-4.j)*k)+(11.*Omega))))))+(4.*aux29)
    aux31=(-298.*(Delta*Omega))+((34.*(Omega**2))+((0.+1.j)*(k*((452.*Delta)+(149.*Omega)))))
    aux32=-2.*((k**2)*((48.*(Delta**2))+((15.*(Delta*Omega))+(-58.*(Omega**2)))))
    aux33=(15.*((Delta**2)*Omega))+((-116.*(Delta*(Omega**2)))+(-25.*(Omega**3.)))
    aux34=(-58.*((Delta**2)*(Omega**2)))+((-25.*(Delta*(Omega**3.)))+(54.*(Omega**4.)))
    aux35=((0.+-4.j)*(k*((32.*(Delta**3.))+aux33)))+(8.*((8.*(Delta**4.))+((5.*((Delta**3.)*Omega))+aux34)))
    aux36=(4.*(k**4.))+(((0.+1.j)*((k**3.)*((32.*Delta)+(5.*Omega))))+(aux32+aux35))
    aux37=((G3**2)*((iac**8.)*((-452.*(Delta**2))+((113.*(k**2))+aux31))))+(16.*((iac**2)*aux36))
    aux38=(8.*((G2**2)*((iac**4.)*aux30)))+(8.*(G2*((5.*((G3**4.)*(iac**14.)))+aux37)))
    aux39=(8.*((G3**2)*((iac**6.)*(((0.+63.j)*(k**3.))+aux19))))+(((0.+128.j)*((k**5.)+aux26))+aux38)
    aux40=(-56.*(Delta*Omega))+((48.*(Omega**2))+((0.+4.j)*(k*((19.*Delta)+(7.*Omega)))))
    aux41=(75.*((G3**2)*(iac**6.)))+(32.*((-76.*(Delta**2))+((19.*(k**2))+aux40)))
    aux42=((24.*((G2**5.)*(iac**10.)))+(aux15+(aux16+aux39)))-((G2**3.)*((iac**6.)*aux41))
    aux43=(0.+32.j)*((G2**4.)*((iac**8.)*(((0.+98.j)*Delta)+((49.*k)+((0.+80.j)*Omega)))))
    aux44=(40.*(k**2))+((-78.*(Delta*Omega))+(((0.+39.j)*(k*Omega))+(96.*(Omega**2))))
    aux45=(55.*((G3**2)*(iac**6.)))+(32.*((-160.*(Delta**2))+(((0.+160.j)*(Delta*k))+aux44)))
    aux46=(0.+4.j)*(k*((183.*(Delta**2))+((40.*(Delta*Omega))+(-175.*(Omega**2)))))
    aux47=(20.*((Delta**2)*Omega))+((-175.*(Delta*(Omega**2)))+(50.*(Omega**3.)))
    aux48=((k**2)*((366.*Delta)+(40.*Omega)))+(aux46+(-8.*((61.*(Delta**3.))+aux47)))
    aux49=(5.*((G3**2)*((iac**6.)*((82.*Delta)+(((0.+-41.j)*k)+(110.*Omega))))))+(16.*(((0.+-61.j)*(k**3.))+aux48))
    aux50=((0.+2.j)*(k*((362.*Delta)+(91.*Omega))))+(-4.*((181.*(Delta**2))+((91.*(Delta*Omega))+(24.*(Omega**2)))))
    aux51=-12.*((k**2)*((22.*(Delta**2))+((6.*(Delta*Omega))+(-27.*(Omega**2)))))
    aux52=(22.*(Delta**3.))+((9.*((Delta**2)*Omega))+((-81.*(Delta*(Omega**2)))+(-17.*(Omega**3.))))
    aux53=(-81.*((Delta**2)*(Omega**2)))+((-34.*(Delta*(Omega**3.)))+(78.*(Omega**4.)))
    aux54=((0.+-16.j)*(k*aux52))+(16.*((11.*(Delta**4.))+((6.*((Delta**3.)*Omega))+aux53)))
    aux55=(11.*(k**4.))+(((0.+4.j)*((k**3.)*((22.*Delta)+(3.*Omega))))+(aux51+aux54))
    aux56=(16.*((G3**2)*((iac**8.)*((181.*(k**2))+aux50))))+(512.*((iac**2)*aux55))
    aux57=5.*((G3**4.)*((iac**12.)*(((0.+26.j)*Delta)+((13.*k)+((0.+66.j)*Omega)))))
    aux58=(9.*(Delta**3.))+((-6.*((Delta**2)*Omega))+((19.*(Delta*(Omega**2)))+(114.*(Omega**3.))))
    aux59=(-4.*(k*((27.*(Delta**2))+((-12.*(Delta*Omega))+(19.*(Omega**2))))))+((0.+-8.j)*aux58)
    aux60=(iac**6.)*((9.*(k**3.))+(((0.+6.j)*((k**2)*((9.*Delta)+(-2.*Omega))))+aux59))
    aux61=-4.*((k**3.)*((10.*(Delta**2))+((4.*(Delta*Omega))+(-13.*(Omega**2)))))
    aux62=(10.*(Delta**3.))+((6.*((Delta**2)*Omega))+((-39.*(Delta*(Omega**2)))+(-13.*(Omega**3.))))
    aux63=(-39.*((Delta**2)*(Omega**2)))+((-26.*(Delta*(Omega**3.)))+(36.*(Omega**4.)))
    aux64=(-13.*((Delta**2)*(Omega**3.)))+((36.*(Delta*(Omega**4.)))+(36.*(Omega**5.)))
    aux65=(Delta**5.)+(((Delta**4.)*Omega)+((-13.*((Delta**3.)*(Omega**2)))+aux64))
    aux66=(16.*(k*((5.*(Delta**4.))+((4.*((Delta**3.)*Omega))+aux63))))+((0.+32.j)*aux65)
    aux67=((0.+2.j)*((k**4.)*((5.*Delta)+Omega)))+(aux61+(((0.+-8.j)*((k**2)*aux62))+aux66))
    aux68=(G2*((75.*((G3**4.)*(iac**14.)))+aux56))+((0.+6.j)*(aux57+((32.*((G3**2)*aux60))+(256.*((k**5.)+aux67)))))
    aux69=(-4.*((G2**3.)*((iac**6.)*aux45)))+((8.*((G2**2)*((iac**4.)*aux49)))+aux68)
    aux70=(16.*(G1*aux42))+(G3*((iac**2)*((160.*((G2**5.)*(iac**10.)))+(aux43+aux69))))
    aux71=(16.*((G1**2)*(G3*((iac**4.)*((-132.*((G2**3.)*(iac**6.)))+aux14)))))+aux70
    aux72=(1024.*aux1)+((64.*((G1**3.)*((-20.*((G2**3.)*(iac**8.)))+(aux2+aux7))))+aux71)
    aux73=-24.*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux74=(4.*((G2**2)*(iac**4.)))+(((0.+23.j)*(G2*((iac**2)*(((0.+2.j)*Delta)+k))))+aux73)
    aux75=(iac**4.)*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux76=(3.*((G2**2)*(iac**8.)))+(((0.+16.j)*(G2*((iac**6.)*(((0.+2.j)*Delta)+k))))+(-16.*aux75))
    aux77=(-68.*(Delta**2))+(((0.+68.j)*(Delta*k))+((17.*(k**2))+(194.*(Omega**2))))
    aux78=(iac**6.)*((((0.+2.j)*Delta)+k)*((125.*((G3**2)*(iac**6.)))+(32.*aux77)))
    aux79=(-676.*(Delta**2))+(((0.+676.j)*(Delta*k))+((169.*(k**2))+(672.*(Omega**2))))
    aux80=(-32.*(Delta**2))+(((0.+32.j)*(Delta*k))+((8.*(k**2))+(65.*(Omega**2))))
    aux81=16.*((3.*(Delta**4.))+((-28.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux82=(-8.*((k**2)*((9.*(Delta**2))+(-14.*(Omega**2)))))+(((0.+-32.j)*(k*((3.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+aux81)
    aux83=(128.*((G3**2)*((iac**6.)*aux80)))+(256.*(((0.+24.j)*(Delta*(k**3.)))+((3.*(k**4.))+aux82)))
    aux84=(iac**2)*(((2.*Delta)+((0.+-1.j)*k))*((145.*((G3**4.)*(iac**12.)))+aux83))
    aux85=(-1300.*(Delta**2))+(((0.+1300.j)*(Delta*k))+((325.*(k**2))+(4356.*(Omega**2))))
    aux86=16.*((19.*(Delta**4.))+((-29.*((Delta**2)*(Omega**2)))+(-198.*(Omega**4.))))
    aux87=((k**2)*((-456.*(Delta**2))+(116.*(Omega**2))))+(((0.+-16.j)*(k*((38.*(Delta**3.))+(-29.*(Delta*(Omega**2))))))+aux86)
    aux88=(G3**2)*((iac**6.)*(((0.+152.j)*(Delta*(k**3.)))+((19.*(k**4.))+aux87)))
    aux89=(k**2)*((15.*(Delta**4.))+((-84.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux90=(3.*(Delta**5.))+((-28.*((Delta**3.)*(Omega**2)))+(49.*(Delta*(Omega**4.))))
    aux91=(-14.*((Delta**4.)*(Omega**2)))+((49.*((Delta**2)*(Omega**4.)))+(-36.*(Omega**6.)))
    aux92=((0.+-32.j)*((k**3.)*((5.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+((16.*aux89)+(((0.+64.j)*(k*aux90))+(-64.*((Delta**6.)+aux91))))
    aux93=((0.+12.j)*(Delta*(k**5.)))+((k**6.)+(((k**4.)*((-60.*(Delta**2))+(56.*(Omega**2))))+aux92))
    aux94=(-188.*(Delta**2))+(((0.+188.j)*(Delta*k))+((47.*(k**2))+(252.*(Omega**2))))
    aux95=(-164.*(Delta**2))+(((0.+164.j)*(Delta*k))+((41.*(k**2))+(324.*(Omega**2))))
    aux96=(iac**2)*((((0.+2.j)*Delta)+k)*((195.*((G3**2)*(iac**6.)))+(16.*aux95)))
    aux97=(-12.*(Delta**2))+(((0.+12.j)*(Delta*k))+((3.*(k**2))+(44.*(Omega**2))))
    aux98=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux99=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux98))
    aux100=((0.+1.j)*(G2*aux96))+(-24.*((3.*((G3**2)*((iac**6.)*aux97)))+(8.*aux99)))
    aux101=(2.*((G2**2)*((iac**4.)*((15.*((G3**2)*(iac**6.)))+(8.*aux94)))))+aux100
    aux102=(-40.*((G2**4.)*(iac**8.)))+((328.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+aux101)
    aux103=(-28.*(Delta**2))+(((0.+28.j)*(Delta*k))+((7.*(k**2))+(60.*(Omega**2))))
    aux104=(iac**2)*((((0.+2.j)*Delta)+k)*((25.*((G3**2)*(iac**6.)))+(4.*aux103)))
    aux105=(-132.*(Delta**2))+(((0.+132.j)*(Delta*k))+((33.*(k**2))+(200.*(Omega**2))))
    aux106=(-36.*(Delta**2))+(((0.+36.j)*(Delta*k))+((9.*(k**2))+(140.*(Omega**2))))
    aux107=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux108=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux107))
    aux109=((G2**2)*((iac**4.)*((65.*((G3**2)*(iac**6.)))+(16.*aux105))))+(-16.*((3.*((G3**2)*((iac**6.)*aux106)))+(8.*aux108)))
    aux110=(240.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+(((0.+16.j)*(G2*aux104))+aux109)
    aux111=(-32.*(G1*(G3*((iac**4.)*aux102))))+(-32.*((G1**2)*((iac**2)*((-32.*((G2**4.)*(iac**8.)))+aux110))))
    aux112=(8.*(G2*aux84))+((4.*(((G3**4.)*((iac**12.)*aux85))+((32.*aux88)+(256.*aux93))))+aux111)
    aux113=(32.*((G2**4.)*((iac**8.)*((15.*((G3**2)*(iac**6.)))+(2.*aux79)))))+aux112
    aux114=(-512.*((G1**3.)*(G3*((iac**6.)*aux74))))+((-256.*((G1**4.)*aux76))+(((0.+32.j)*((G2**3.)*aux78))+aux113))
    aux115=(-320.*((G2**6.)*(iac**12.)))+((3200.*((G2**5.)*((iac**10.)*((2.*Delta)+((0.+-1.j)*k)))))+aux114)
    aux116=(-580.*(Delta**2))+(((0.+580.j)*(Delta*k))+((145.*(k**2))+(712.*(Omega**2))))
    aux117=16.*((57.*(Delta**4.))+((-321.*((Delta**2)*(Omega**2)))+(184.*(Omega**4.))))
    aux118=((k**2)*((-1368.*(Delta**2))+(1284.*(Omega**2))))+(((0.+-48.j)*(k*((38.*(Delta**3.))+(-107.*(Delta*(Omega**2))))))+aux117)
    aux119=(64.*((G3**2)*((iac**6.)*aux116)))+(256.*(((0.+456.j)*(Delta*(k**3.)))+((57.*(k**4.))+aux118)))
    output=(0.5*(a0*(iac*((1024.*((G1**4.)*(G3*aux0)))+aux72))))/(aux115-((G2**2)*((iac**4.)*((175.*((G3**4.)*(iac**12.)))+aux119))))
    return output


def ap1_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    k=ktot
    aux0=(G1**5.)*((iac**4.)*((-8.*Delta)+((G2*(iac**2))+(((0.+4.j)*k)+(16.*Omega)))))
    aux1=(iac**6.)*((-26.*Delta)+((3.*(G2*(iac**2)))+(((0.+13.j)*k)+(56.*Omega))))
    aux2=((0.+4.j)*(Delta*k))+((k**2)+((4.*(Delta*Omega))+(((0.+-2.j)*(k*Omega))+(2.*(Omega**2)))))
    aux3=G2*((iac**4.)*((19.*((G3**2)*(iac**6.)))+(64.*((-4.*(Delta**2))+aux2))))
    aux4=(-4.*(k*((3.*(Delta**2))+(Omega**2))))+((0.+-8.j)*((Delta**3.)+((Delta*(Omega**2))+(-10.*(Omega**3.)))))
    aux5=(3.*aux3)+((0.+96.j)*((iac**2)*(((0.+6.j)*(Delta*(k**2)))+((k**3.)+aux4))))
    aux6=(2.*((G3**2)*((iac**8.)*((-266.*Delta)+(((0.+133.j)*k)+(610.*Omega))))))+aux5
    aux7=(16.*((G2**2)*((iac**6.)*((16.*Delta)+(((0.+-8.j)*k)+(-23.*Omega))))))+aux6
    aux8=8.*((G2**2)*((iac**4.)*((230.*Delta)+(((0.+-115.j)*k)+(-324.*Omega)))))
    aux9=((0.+2.j)*(k*((182.*Delta)+(-75.*Omega))))+(4.*((-91.*(Delta**2))+((75.*(Delta*Omega))+(26.*(Omega**2)))))
    aux10=(12.*(Delta**3.))+((3.*((Delta**2)*Omega))+((17.*(Delta*(Omega**2)))+(-132.*(Omega**3.))))
    aux11=(-2.*(k*((36.*(Delta**2))+((6.*(Delta*Omega))+(17.*(Omega**2))))))+((0.+-4.j)*aux10)
    aux12=(0.+32.j)*((6.*(k**3.))+(((0.+3.j)*((k**2)*((12.*Delta)+Omega)))+aux11))
    aux13=((G3**2)*((iac**6.)*((-334.*Delta)+(((0.+167.j)*k)+(804.*Omega)))))+aux12
    aux14=(G2*((135.*((G3**2)*(iac**8.)))+(16.*((iac**2)*((91.*(k**2))+aux9)))))+(4.*aux13)
    aux15=16.*((G1**2)*(G3*((iac**4.)*((-132.*((G2**3.)*(iac**6.)))+(aux8+aux14)))))
    aux16=(0.+-4.j)*(k*((189.*(Delta**2))+((60.*(Delta*Omega))+(113.*(Omega**2)))))
    aux17=(30.*((Delta**2)*Omega))+((113.*(Delta*(Omega**2)))+(-750.*(Omega**3.)))
    aux18=(-6.*((k**2)*((63.*Delta)+(10.*Omega))))+(aux16+(8.*((63.*(Delta**3.))+aux17)))
    aux19=(10.*(Delta**3.))+((-6.*((Delta**2)*Omega))+((-39.*(Delta*(Omega**2)))+(13.*(Omega**3.))))
    aux20=(-39.*((Delta**2)*(Omega**2)))+((26.*(Delta*(Omega**3.)))+(36.*(Omega**4.)))
    aux21=(13.*((Delta**2)*(Omega**3.)))+((36.*(Delta*(Omega**4.)))+(-36.*(Omega**5.)))
    aux22=((Delta**5.)+((-13.*((Delta**3.)*(Omega**2)))+aux21))-((Delta**4.)*Omega)
    aux23=(16.*(k*((5.*(Delta**4.))+((-4.*((Delta**3.)*Omega))+aux20))))+((0.+32.j)*aux22)
    aux24=((k**3.)*((-40.*(Delta**2))+((16.*(Delta*Omega))+(52.*(Omega**2)))))+(((0.+-8.j)*((k**2)*aux19))+aux23)
    aux25=(0.+4.j)*(k*((75.*(Delta**2))+((-26.*(Delta*Omega))+(-70.*(Omega**2)))))
    aux26=(-25.*(Delta**3.))+((13.*((Delta**2)*Omega))+((70.*(Delta*(Omega**2)))+(14.*(Omega**3.))))
    aux27=((0.+-25.j)*(k**3.))+((2.*((k**2)*((75.*Delta)+(-13.*Omega))))+(aux25+(8.*aux26)))
    aux28=(17.*((G3**2)*((iac**6.)*((8.*Delta)+(((0.+-4.j)*k)+(-11.*Omega))))))+(4.*aux27)
    aux29=((0.+1.j)*(k*((452.*Delta)+(-149.*Omega))))+((298.*(Delta*Omega))+(34.*(Omega**2)))
    aux30=(-15.*((Delta**2)*Omega))+((-116.*(Delta*(Omega**2)))+(25.*(Omega**3.)))
    aux31=(-58.*((Delta**2)*(Omega**2)))+((25.*(Delta*(Omega**3.)))+(54.*(Omega**4.)))
    aux32=((0.+-4.j)*(k*((32.*(Delta**3.))+aux30)))+(8.*((8.*(Delta**4.))+((-5.*((Delta**3.)*Omega))+aux31)))
    aux33=((k**2)*((-96.*(Delta**2))+((30.*(Delta*Omega))+(116.*(Omega**2)))))+aux32
    aux34=(iac**2)*((4.*(k**4.))+(((0.+1.j)*((k**3.)*((32.*Delta)+(-5.*Omega))))+aux33))
    aux35=((G3**2)*((iac**8.)*((-452.*(Delta**2))+((113.*(k**2))+aux29))))+(16.*aux34)
    aux36=(8.*((G2**2)*((iac**4.)*aux28)))+(8.*(G2*((5.*((G3**4.)*(iac**14.)))+aux35)))
    aux37=((0.+128.j)*((k**5.)+(((0.+2.j)*((k**4.)*((5.*Delta)-Omega)))+aux24)))+aux36
    aux38=(5.*((G3**4.)*((iac**12.)*((-82.*Delta)+(((0.+41.j)*k)+(204.*Omega))))))+((8.*((G3**2)*((iac**6.)*(((0.+63.j)*(k**3.))+aux18))))+aux37)
    aux39=(8.*((G2**4.)*((iac**8.)*((-54.*Delta)+(((0.+27.j)*k)+(52.*Omega))))))+aux38
    aux40=((0.+4.j)*(k*((19.*Delta)+(-7.*Omega))))+((56.*(Delta*Omega))+(48.*(Omega**2)))
    aux41=(75.*((G3**2)*(iac**6.)))+(32.*((-76.*(Delta**2))+((19.*(k**2))+aux40)))
    aux42=16.*(G1*(((24.*((G2**5.)*(iac**10.)))+aux39)-((G2**3.)*((iac**6.)*aux41))))
    aux43=(40.*(k**2))+((78.*(Delta*Omega))+(((0.+-39.j)*(k*Omega))+(96.*(Omega**2))))
    aux44=(55.*((G3**2)*(iac**6.)))+(32.*((-160.*(Delta**2))+(((0.+160.j)*(Delta*k))+aux43)))
    aux45=(-20.*((Delta**2)*Omega))+((-175.*(Delta*(Omega**2)))+(-50.*(Omega**3.)))
    aux46=(k*((-732.*(Delta**2))+((160.*(Delta*Omega))+(700.*(Omega**2)))))+((0.+-8.j)*((61.*(Delta**3.))+aux45))
    aux47=(0.+-16.j)*((61.*(k**3.))+(((0.+2.j)*((k**2)*((183.*Delta)+(-20.*Omega))))+aux46))
    aux48=(5.*((G3**2)*((iac**6.)*((82.*Delta)+(((0.+-41.j)*k)+(-110.*Omega))))))+aux47
    aux49=((0.+2.j)*(k*((362.*Delta)+(-91.*Omega))))+((364.*(Delta*Omega))+(-96.*(Omega**2)))
    aux50=(22.*(Delta**3.))+((-9.*((Delta**2)*Omega))+((-81.*(Delta*(Omega**2)))+(17.*(Omega**3.))))
    aux51=(-81.*((Delta**2)*(Omega**2)))+((34.*(Delta*(Omega**3.)))+(78.*(Omega**4.)))
    aux52=((0.+-16.j)*(k*aux50))+(16.*((11.*(Delta**4.))+((-6.*((Delta**3.)*Omega))+aux51)))
    aux53=((k**2)*((-264.*(Delta**2))+((72.*(Delta*Omega))+(324.*(Omega**2)))))+aux52
    aux54=(iac**2)*((11.*(k**4.))+(((0.+4.j)*((k**3.)*((22.*Delta)+(-3.*Omega))))+aux53))
    aux55=(16.*((G3**2)*((iac**8.)*((-724.*(Delta**2))+((181.*(k**2))+aux49)))))+(512.*aux54)
    aux56=5.*((G3**4.)*((iac**12.)*(((0.+26.j)*Delta)+((13.*k)+((0.+-66.j)*Omega)))))
    aux57=(9.*(Delta**3.))+((6.*((Delta**2)*Omega))+((19.*(Delta*(Omega**2)))+(-114.*(Omega**3.))))
    aux58=(-4.*(k*((27.*(Delta**2))+((12.*(Delta*Omega))+(19.*(Omega**2))))))+((0.+-8.j)*aux57)
    aux59=(iac**6.)*((9.*(k**3.))+(((0.+6.j)*((k**2)*((9.*Delta)+(2.*Omega))))+aux58))
    aux60=(10.*(Delta**3.))+((-6.*((Delta**2)*Omega))+((-39.*(Delta*(Omega**2)))+(13.*(Omega**3.))))
    aux61=(-39.*((Delta**2)*(Omega**2)))+((26.*(Delta*(Omega**3.)))+(36.*(Omega**4.)))
    aux62=(13.*((Delta**2)*(Omega**3.)))+((36.*(Delta*(Omega**4.)))+(-36.*(Omega**5.)))
    aux63=((Delta**5.)+((-13.*((Delta**3.)*(Omega**2)))+aux62))-((Delta**4.)*Omega)
    aux64=(16.*(k*((5.*(Delta**4.))+((-4.*((Delta**3.)*Omega))+aux61))))+((0.+32.j)*aux63)
    aux65=((k**3.)*((-40.*(Delta**2))+((16.*(Delta*Omega))+(52.*(Omega**2)))))+(((0.+-8.j)*((k**2)*aux60))+aux64)
    aux66=(32.*((G3**2)*aux59))+(256.*((k**5.)+(((0.+2.j)*((k**4.)*((5.*Delta)-Omega)))+aux65)))
    aux67=(8.*((G2**2)*((iac**4.)*aux48)))+((G2*((75.*((G3**4.)*(iac**14.)))+aux55))+((0.+6.j)*(aux56+aux66)))
    aux68=(32.*((G2**4.)*((iac**8.)*((-98.*Delta)+(((0.+49.j)*k)+(80.*Omega))))))+((-4.*((G2**3.)*((iac**6.)*aux44)))+aux67)
    aux69=(64.*((G1**3.)*((-20.*((G2**3.)*(iac**8.)))+aux7)))+(aux15+(aux42+(G3*((iac**2)*((160.*((G2**5.)*(iac**10.)))+aux68)))))
    aux70=-24.*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux71=(4.*((G2**2)*(iac**4.)))+(((0.+23.j)*(G2*((iac**2)*(((0.+2.j)*Delta)+k))))+aux70)
    aux72=(iac**4.)*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux73=(3.*((G2**2)*(iac**8.)))+(((0.+16.j)*(G2*((iac**6.)*(((0.+2.j)*Delta)+k))))+(-16.*aux72))
    aux74=(-68.*(Delta**2))+(((0.+68.j)*(Delta*k))+((17.*(k**2))+(194.*(Omega**2))))
    aux75=(iac**6.)*(((2.*Delta)+((0.+-1.j)*k))*((125.*((G3**2)*(iac**6.)))+(32.*aux74)))
    aux76=(-676.*(Delta**2))+(((0.+676.j)*(Delta*k))+((169.*(k**2))+(672.*(Omega**2))))
    aux77=(-32.*(Delta**2))+(((0.+32.j)*(Delta*k))+((8.*(k**2))+(65.*(Omega**2))))
    aux78=16.*((3.*(Delta**4.))+((-28.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux79=(-8.*((k**2)*((9.*(Delta**2))+(-14.*(Omega**2)))))+(((0.+-32.j)*(k*((3.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+aux78)
    aux80=(128.*((G3**2)*((iac**6.)*aux77)))+(256.*(((0.+24.j)*(Delta*(k**3.)))+((3.*(k**4.))+aux79)))
    aux81=G2*((iac**2)*((((0.+2.j)*Delta)+k)*((145.*((G3**4.)*(iac**12.)))+aux80)))
    aux82=(-580.*(Delta**2))+(((0.+580.j)*(Delta*k))+((145.*(k**2))+(712.*(Omega**2))))
    aux83=16.*((57.*(Delta**4.))+((-321.*((Delta**2)*(Omega**2)))+(184.*(Omega**4.))))
    aux84=((k**2)*((-1368.*(Delta**2))+(1284.*(Omega**2))))+(((0.+-48.j)*(k*((38.*(Delta**3.))+(-107.*(Delta*(Omega**2))))))+aux83)
    aux85=(64.*((G3**2)*((iac**6.)*aux82)))+(256.*(((0.+456.j)*(Delta*(k**3.)))+((57.*(k**4.))+aux84)))
    aux86=(-1300.*(Delta**2))+(((0.+1300.j)*(Delta*k))+((325.*(k**2))+(4356.*(Omega**2))))
    aux87=16.*((19.*(Delta**4.))+((-29.*((Delta**2)*(Omega**2)))+(-198.*(Omega**4.))))
    aux88=((k**2)*((-456.*(Delta**2))+(116.*(Omega**2))))+(((0.+-16.j)*(k*((38.*(Delta**3.))+(-29.*(Delta*(Omega**2))))))+aux87)
    aux89=(G3**2)*((iac**6.)*(((0.+152.j)*(Delta*(k**3.)))+((19.*(k**4.))+aux88)))
    aux90=(k**2)*((15.*(Delta**4.))+((-84.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux91=(3.*(Delta**5.))+((-28.*((Delta**3.)*(Omega**2)))+(49.*(Delta*(Omega**4.))))
    aux92=(-14.*((Delta**4.)*(Omega**2)))+((49.*((Delta**2)*(Omega**4.)))+(-36.*(Omega**6.)))
    aux93=((0.+-32.j)*((k**3.)*((5.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+((16.*aux90)+(((0.+64.j)*(k*aux91))+(-64.*((Delta**6.)+aux92))))
    aux94=((0.+12.j)*(Delta*(k**5.)))+((k**6.)+(((k**4.)*((-60.*(Delta**2))+(56.*(Omega**2))))+aux93))
    aux95=(-188.*(Delta**2))+(((0.+188.j)*(Delta*k))+((47.*(k**2))+(252.*(Omega**2))))
    aux96=(-164.*(Delta**2))+(((0.+164.j)*(Delta*k))+((41.*(k**2))+(324.*(Omega**2))))
    aux97=(iac**2)*((((0.+2.j)*Delta)+k)*((195.*((G3**2)*(iac**6.)))+(16.*aux96)))
    aux98=(-12.*(Delta**2))+(((0.+12.j)*(Delta*k))+((3.*(k**2))+(44.*(Omega**2))))
    aux99=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux100=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux99))
    aux101=((0.+1.j)*(G2*aux97))+(-24.*((3.*((G3**2)*((iac**6.)*aux98)))+(8.*aux100)))
    aux102=(2.*((G2**2)*((iac**4.)*((15.*((G3**2)*(iac**6.)))+(8.*aux95)))))+aux101
    aux103=(-40.*((G2**4.)*(iac**8.)))+((328.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+aux102)
    aux104=(-28.*(Delta**2))+(((0.+28.j)*(Delta*k))+((7.*(k**2))+(60.*(Omega**2))))
    aux105=(iac**2)*((((0.+2.j)*Delta)+k)*((25.*((G3**2)*(iac**6.)))+(4.*aux104)))
    aux106=(-132.*(Delta**2))+(((0.+132.j)*(Delta*k))+((33.*(k**2))+(200.*(Omega**2))))
    aux107=(-36.*(Delta**2))+(((0.+36.j)*(Delta*k))+((9.*(k**2))+(140.*(Omega**2))))
    aux108=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux109=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux108))
    aux110=((G2**2)*((iac**4.)*((65.*((G3**2)*(iac**6.)))+(16.*aux106))))+(-16.*((3.*((G3**2)*((iac**6.)*aux107)))+(8.*aux109)))
    aux111=(240.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+(((0.+16.j)*(G2*aux105))+aux110)
    aux112=(32.*(G1*(G3*((iac**4.)*aux103))))+(32.*((G1**2)*((iac**2)*((-32.*((G2**4.)*(iac**8.)))+aux111))))
    aux113=(-4.*(((G3**4.)*((iac**12.)*aux86))+((32.*aux89)+(256.*aux94))))+aux112
    aux114=((0.+8.j)*aux81)+(((G2**2)*((iac**4.)*((175.*((G3**4.)*(iac**12.)))+aux85)))+aux113)
    aux115=(-32.*((G2**4.)*((iac**8.)*((15.*((G3**2)*(iac**6.)))+(2.*aux76)))))+aux114
    aux116=(512.*((G1**3.)*(G3*((iac**6.)*aux71))))+((256.*((G1**4.)*aux73))+((32.*((G2**3.)*aux75))+aux115))
    aux117=(320.*((G2**6.)*(iac**12.)))+(((0.+3200.j)*((G2**5.)*((iac**10.)*(((0.+2.j)*Delta)+k))))+aux116)
    output=(-0.5*(a0*(iac*((1024.*aux0)+((1024.*((G1**4.)*(G3*aux1)))+aux69)))))/aux117
    return output


def am2_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    k=ktot
    aux0=(0.+80.j)*((G2**5.)*((iac**8.)*((9.*k)+((0.+2.j)*((9.*Delta)+(2.*Omega))))))
    aux1=((0.+2.j)*(k*((2.*Delta)-Omega)))+((4.*(Delta*Omega))+(24.*(Omega**2)))
    aux2=(-8.*((iac**2)*((-4.*(Delta**2))+((k**2)+aux1))))+(2.*(G2*((iac**4.)*(((0.+3.j)*k)+(-2.*((3.*Delta)+Omega))))))
    aux3=((0.+26.j)*(k*((2.*Delta)-Omega)))+((52.*(Delta*Omega))+(272.*(Omega**2)))
    aux4=(-4.*((-52.*(Delta**2))+((13.*(k**2))+aux3)))+(6.*(G2*((iac**2)*(((0.+7.j)*k)+(-2.*((7.*Delta)+Omega))))))
    aux5=((0.+4.j)*(k*((31.*Delta)+(10.*Omega))))+(-4.*((31.*(Delta**2))+((20.*(Delta*Omega))+(-37.*(Omega**2)))))
    aux6=(G2**4.)*((iac**6.)*((65.*((G3**2)*(iac**6.)))+(32.*((31.*(k**2))+aux5))))
    aux7=(0.+12.j)*(k*((37.*(Delta**2))+((28.*(Delta*Omega))+(-39.*(Omega**2)))))
    aux8=(-42.*((Delta**2)*Omega))+((117.*(Delta*(Omega**2)))+(74.*(Omega**3.)))
    aux9=(6.*((k**2)*((37.*Delta)+(14.*Omega))))+(aux7+(8.*((-37.*(Delta**3.))+aux8)))
    aux10=(5.*((G3**2)*((iac**6.)*((26.*Delta)+(((0.+-13.j)*k)+(3.*Omega))))))+(4.*(((0.+-37.j)*(k**3.))+aux9))
    aux11=((0.+20.j)*(k*((13.*Delta)+(-5.*Omega))))+((200.*(Delta*Omega))+(924.*(Omega**2)))
    aux12=-12.*((k**2)*((10.*(Delta**2))+((15.*(Delta*Omega))+(-9.*(Omega**2)))))
    aux13=(45.*((Delta**2)*Omega))+((-54.*(Delta*(Omega**2)))+(-95.*(Omega**3.)))
    aux14=(-27.*((Delta**2)*(Omega**2)))+((-95.*(Delta*(Omega**3.)))+(-42.*(Omega**4.)))
    aux15=((0.+-8.j)*(k*((20.*(Delta**3.))+aux13)))+(16.*((5.*(Delta**4.))+((15.*((Delta**3.)*Omega))+aux14)))
    aux16=(5.*(k**4.))+(((0.+10.j)*((k**3.)*((4.*Delta)+(3.*Omega))))+(aux12+aux15))
    aux17=((G3**2)*((iac**6.)*((-260.*(Delta**2))+((65.*(k**2))+aux11))))+(16.*aux16)
    aux18=((0.+2.j)*(k*((550.*Delta)+(119.*Omega))))+(-4.*((275.*(Delta**2))+((119.*(Delta*Omega))+(-458.*(Omega**2)))))
    aux19=(5.*(Delta**3.))+((6.*((Delta**2)*Omega))+((-15.*(Delta*(Omega**2)))+(-10.*(Omega**3.))))
    aux20=(-30.*((Delta**2)*(Omega**2)))+((-40.*(Delta*(Omega**3.)))+(9.*(Omega**4.)))
    aux21=((0.+-32.j)*(k*aux19))+(16.*((5.*(Delta**4.))+((8.*((Delta**3.)*Omega))+aux20)))
    aux22=(-24.*((k**2)*((5.*(Delta**2))+((4.*(Delta*Omega))+(-5.*(Omega**2))))))+aux21
    aux23=128.*((5.*(k**4.))+(((0.+8.j)*((k**3.)*((5.*Delta)+(2.*Omega))))+aux22))
    aux24=(25.*((G3**4.)*(iac**12.)))+((4.*((G3**2)*((iac**6.)*((275.*(k**2))+aux18))))+aux23)
    aux25=(0.+-4.j)*(k*((162.*(Delta**2))+((141.*(Delta*Omega))+(-194.*(Omega**2)))))
    aux26=(141.*((Delta**2)*Omega))+((-388.*(Delta*(Omega**2)))+(-333.*(Omega**3.)))
    aux27=(-3.*((k**2)*((108.*Delta)+(47.*Omega))))+(aux25+(4.*((108.*(Delta**3.))+aux26)))
    aux28=(5.*(Delta**3.))+((6.*((Delta**2)*Omega))+((-15.*(Delta*(Omega**2)))+(-10.*(Omega**3.))))
    aux29=(-30.*((Delta**2)*(Omega**2)))+((-40.*(Delta*(Omega**3.)))+(9.*(Omega**4.)))
    aux30=(-20.*((Delta**2)*(Omega**3.)))+((9.*(Delta*(Omega**4.)))+(18.*(Omega**5.)))
    aux31=(Delta**5.)+((2.*((Delta**4.)*Omega))+((-10.*((Delta**3.)*(Omega**2)))+aux30))
    aux32=(16.*(k*((5.*(Delta**4.))+((8.*((Delta**3.)*Omega))+aux29))))+((0.+32.j)*aux31)
    aux33=(-8.*((k**3.)*((5.*(Delta**2))+((4.*(Delta*Omega))+(-5.*(Omega**2))))))+(((0.+-16.j)*((k**2)*aux28))+aux32)
    aux34=(0.+256.j)*((k**5.)+(((0.+2.j)*((k**4.)*((5.*Delta)+(2.*Omega))))+aux33))
    aux35=(5.*((G3**4.)*((iac**12.)*((-134.*Delta)+(((0.+67.j)*k)+(18.*Omega))))))+((32.*((G3**2)*((iac**6.)*(((0.+54.j)*(k**3.))+aux27))))+aux34)
    aux36=((0.+4.j)*(k*((41.*Delta)+(-20.*Omega))))+((160.*(Delta*Omega))+(756.*(Omega**2)))
    aux37=(4.*(Delta**3.))+((9.*((Delta**2)*Omega))+((-14.*(Delta*(Omega**2)))+(-27.*(Omega**3.))))
    aux38=(-7.*((Delta**2)*(Omega**2)))+((-27.*(Delta*(Omega**3.)))+(-18.*(Omega**4.)))
    aux39=((0.+-8.j)*(k*aux37))+(16.*((Delta**4.)+((3.*((Delta**3.)*Omega))+aux38)))
    aux40=(-4.*((k**2)*((6.*(Delta**2))+((9.*(Delta*Omega))+(-7.*(Omega**2))))))+aux39
    aux41=(4.*(Delta**3.))+((3.*((Delta**2)*Omega))+((-20.*(Delta*(Omega**2)))+(-15.*(Omega**3.))))
    aux42=(-4.*(k*((6.*(Delta**2))+((3.*(Delta*Omega))+(-10.*(Omega**2))))))+((0.+-4.j)*aux41)
    aux43=(0.+-64.j)*((iac**2)*((2.*(k**3.))+(((0.+3.j)*((k**2)*((4.*Delta)+Omega)))+aux42)))
    aux44=((G3**2)*((iac**8.)*((410.*Delta)+(((0.+-205.j)*k)+(2.*Omega)))))+aux43
    aux45=(64.*((k**4.)+(((0.+2.j)*((k**3.)*((4.*Delta)+(3.*Omega))))+aux40)))+(2.*(G2*aux44))
    aux46=(12.*((G3**2)*((iac**6.)*((-164.*(Delta**2))+((41.*(k**2))+aux36)))))+aux45
    aux47=(16.*((G2**3.)*((iac**6.)*((-24.*Delta)+(((0.+12.j)*k)+(-5.*Omega))))))+aux46
    aux48=(-8.*(Delta*Omega))+((220.*(Omega**2))+((0.+4.j)*(k*((23.*Delta)+Omega))))
    aux49=(65.*((G3**2)*(iac**6.)))+(16.*((-92.*(Delta**2))+((23.*(k**2))+aux48)))
    aux50=(G1**2)*(((28.*((G2**4.)*(iac**8.)))+aux47)-((G2**2)*((iac**4.)*aux49)))
    aux51=(-20.*(Delta*Omega))+((157.*(Omega**2))+((0.+10.j)*(k*((8.*Delta)+Omega))))
    aux52=(65.*((G3**2)*(iac**6.)))+(64.*((-80.*(Delta**2))+((20.*(k**2))+aux51)))
    aux53=(16.*((Delta**2)*Omega))+((-62.*(Delta*(Omega**2)))+(-49.*(Omega**3.)))
    aux54=(-4.*(k*((45.*(Delta**2))+((32.*(Delta*Omega))+(-62.*(Omega**2))))))+((0.+-8.j)*((15.*(Delta**3.))+aux53))
    aux55=(iac**2)*((15.*(k**3.))+(((0.+2.j)*((k**2)*((45.*Delta)+(16.*Omega))))+aux54))
    aux56=(5.*((G3**2)*((iac**8.)*((-86.*Delta)+(((0.+43.j)*k)+(8.*Omega))))))+((0.+32.j)*aux55)
    aux57=((0.+2.j)*(k*((254.*Delta)+(-115.*Omega))))+((460.*(Delta*Omega))+(2064.*(Omega**2)))
    aux58=(4.*(Delta**3.))+((9.*((Delta**2)*Omega))+((-12.*(Delta*(Omega**2)))+(-22.*(Omega**3.))))
    aux59=(-6.*((Delta**2)*(Omega**2)))+((-22.*(Delta*(Omega**3.)))+(-12.*(Omega**4.)))
    aux60=((0.+-8.j)*(k*aux58))+(16.*((Delta**4.)+((3.*((Delta**3.)*Omega))+aux59)))
    aux61=(-12.*((k**2)*((2.*(Delta**2))+((3.*(Delta*Omega))+(-2.*(Omega**2))))))+aux60
    aux62=((G3**2)*((iac**6.)*((-508.*(Delta**2))+((127.*(k**2))+aux57))))+(64.*((k**4.)+(((0.+2.j)*((k**3.)*((4.*Delta)+(3.*Omega))))+aux61)))
    aux63=(16.*((G2**3.)*((iac**6.)*((78.*Delta)+(((0.+-39.j)*k)+(8.*Omega))))))+(((G2**2)*((iac**4.)*aux52))+((2.*(G2*aux56))+(-4.*aux62)))
    aux64=(-8.*aux50)+(4.*(G1*(G3*((iac**2)*((-80.*((G2**4.)*(iac**8.)))+aux63)))))
    aux65=(-6.*((G3**2)*((iac**4.)*aux17)))+((2.*((G2**2)*((iac**2)*aux24)))+((G2*aux35)+aux64))
    aux66=(64.*((G1**3.)*(G3*((iac**4.)*((7.*((G2**2)*(iac**4.)))+aux4)))))+((-2.*aux6)+((16.*((G2**3.)*((iac**4.)*aux10)))+aux65))
    aux67=(80.*((G2**6.)*(iac**10.)))+(aux0+((128.*((G1**4.)*(((G2**2)*(iac**6.))+aux2)))+aux66))
    aux68=-24.*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux69=(4.*((G2**2)*(iac**4.)))+(((0.+23.j)*(G2*((iac**2)*(((0.+2.j)*Delta)+k))))+aux68)
    aux70=(iac**4.)*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux71=(3.*((G2**2)*(iac**8.)))+(((0.+16.j)*(G2*((iac**6.)*(((0.+2.j)*Delta)+k))))+(-16.*aux70))
    aux72=(-68.*(Delta**2))+(((0.+68.j)*(Delta*k))+((17.*(k**2))+(194.*(Omega**2))))
    aux73=(iac**6.)*(((2.*Delta)+((0.+-1.j)*k))*((125.*((G3**2)*(iac**6.)))+(32.*aux72)))
    aux74=(-676.*(Delta**2))+(((0.+676.j)*(Delta*k))+((169.*(k**2))+(672.*(Omega**2))))
    aux75=(-32.*(Delta**2))+(((0.+32.j)*(Delta*k))+((8.*(k**2))+(65.*(Omega**2))))
    aux76=16.*((3.*(Delta**4.))+((-28.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux77=(-8.*((k**2)*((9.*(Delta**2))+(-14.*(Omega**2)))))+(((0.+-32.j)*(k*((3.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+aux76)
    aux78=(128.*((G3**2)*((iac**6.)*aux75)))+(256.*(((0.+24.j)*(Delta*(k**3.)))+((3.*(k**4.))+aux77)))
    aux79=G2*((iac**2)*((((0.+2.j)*Delta)+k)*((145.*((G3**4.)*(iac**12.)))+aux78)))
    aux80=(-580.*(Delta**2))+(((0.+580.j)*(Delta*k))+((145.*(k**2))+(712.*(Omega**2))))
    aux81=16.*((57.*(Delta**4.))+((-321.*((Delta**2)*(Omega**2)))+(184.*(Omega**4.))))
    aux82=((k**2)*((-1368.*(Delta**2))+(1284.*(Omega**2))))+(((0.+-48.j)*(k*((38.*(Delta**3.))+(-107.*(Delta*(Omega**2))))))+aux81)
    aux83=(64.*((G3**2)*((iac**6.)*aux80)))+(256.*(((0.+456.j)*(Delta*(k**3.)))+((57.*(k**4.))+aux82)))
    aux84=(-1300.*(Delta**2))+(((0.+1300.j)*(Delta*k))+((325.*(k**2))+(4356.*(Omega**2))))
    aux85=16.*((19.*(Delta**4.))+((-29.*((Delta**2)*(Omega**2)))+(-198.*(Omega**4.))))
    aux86=((k**2)*((-456.*(Delta**2))+(116.*(Omega**2))))+(((0.+-16.j)*(k*((38.*(Delta**3.))+(-29.*(Delta*(Omega**2))))))+aux85)
    aux87=(G3**2)*((iac**6.)*(((0.+152.j)*(Delta*(k**3.)))+((19.*(k**4.))+aux86)))
    aux88=(k**2)*((15.*(Delta**4.))+((-84.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux89=(3.*(Delta**5.))+((-28.*((Delta**3.)*(Omega**2)))+(49.*(Delta*(Omega**4.))))
    aux90=(-14.*((Delta**4.)*(Omega**2)))+((49.*((Delta**2)*(Omega**4.)))+(-36.*(Omega**6.)))
    aux91=((0.+-32.j)*((k**3.)*((5.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+((16.*aux88)+(((0.+64.j)*(k*aux89))+(-64.*((Delta**6.)+aux90))))
    aux92=((0.+12.j)*(Delta*(k**5.)))+((k**6.)+(((k**4.)*((-60.*(Delta**2))+(56.*(Omega**2))))+aux91))
    aux93=(-188.*(Delta**2))+(((0.+188.j)*(Delta*k))+((47.*(k**2))+(252.*(Omega**2))))
    aux94=(-164.*(Delta**2))+(((0.+164.j)*(Delta*k))+((41.*(k**2))+(324.*(Omega**2))))
    aux95=(iac**2)*((((0.+2.j)*Delta)+k)*((195.*((G3**2)*(iac**6.)))+(16.*aux94)))
    aux96=(-12.*(Delta**2))+(((0.+12.j)*(Delta*k))+((3.*(k**2))+(44.*(Omega**2))))
    aux97=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux98=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux97))
    aux99=((0.+1.j)*(G2*aux95))+(-24.*((3.*((G3**2)*((iac**6.)*aux96)))+(8.*aux98)))
    aux100=(2.*((G2**2)*((iac**4.)*((15.*((G3**2)*(iac**6.)))+(8.*aux93)))))+aux99
    aux101=(-40.*((G2**4.)*(iac**8.)))+((328.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+aux100)
    aux102=(-28.*(Delta**2))+(((0.+28.j)*(Delta*k))+((7.*(k**2))+(60.*(Omega**2))))
    aux103=(iac**2)*((((0.+2.j)*Delta)+k)*((25.*((G3**2)*(iac**6.)))+(4.*aux102)))
    aux104=(-132.*(Delta**2))+(((0.+132.j)*(Delta*k))+((33.*(k**2))+(200.*(Omega**2))))
    aux105=(-36.*(Delta**2))+(((0.+36.j)*(Delta*k))+((9.*(k**2))+(140.*(Omega**2))))
    aux106=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux107=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux106))
    aux108=((G2**2)*((iac**4.)*((65.*((G3**2)*(iac**6.)))+(16.*aux104))))+(-16.*((3.*((G3**2)*((iac**6.)*aux105)))+(8.*aux107)))
    aux109=(240.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+(((0.+16.j)*(G2*aux103))+aux108)
    aux110=(32.*(G1*(G3*((iac**4.)*aux101))))+(32.*((G1**2)*((iac**2)*((-32.*((G2**4.)*(iac**8.)))+aux109))))
    aux111=(-4.*(((G3**4.)*((iac**12.)*aux84))+((32.*aux87)+(256.*aux92))))+aux110
    aux112=((0.+8.j)*aux79)+(((G2**2)*((iac**4.)*((175.*((G3**4.)*(iac**12.)))+aux83)))+aux111)
    aux113=(-32.*((G2**4.)*((iac**8.)*((15.*((G3**2)*(iac**6.)))+(2.*aux74)))))+aux112
    aux114=(512.*((G1**3.)*(G3*((iac**6.)*aux69))))+((256.*((G1**4.)*aux71))+((32.*((G2**3.)*aux73))+aux113))
    aux115=(320.*((G2**6.)*(iac**12.)))+(((0.+3200.j)*((G2**5.)*((iac**10.)*(((0.+2.j)*Delta)+k))))+aux114)
    output=(-2.*(a0*((iac**2)*aux67)))/aux115
    return output


def ap2_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    k=ktot
    aux0=((0.+4.j)*(k*((31.*Delta)+(-10.*Omega))))+((80.*(Delta*Omega))+(148.*(Omega**2)))
    aux1=(65.*((G3**2)*(iac**6.)))+(32.*((-124.*(Delta**2))+((31.*(k**2))+aux0)))
    aux2=(-52.*(Delta*Omega))+((272.*(Omega**2))+((0.+26.j)*(k*((2.*Delta)+Omega))))
    aux3=(6.*(G2*((iac**2)*(((0.+7.j)*k)+(2.*((-7.*Delta)+Omega))))))+(-4.*((-52.*(Delta**2))+((13.*(k**2))+aux2)))
    aux4=((0.+2.j)*(k*((2.*Delta)+Omega)))+(-4.*((Delta**2)+((Delta*Omega)+(-6.*(Omega**2)))))
    aux5=(2.*(G2*((iac**4.)*((-6.*Delta)+(((0.+3.j)*k)+(2.*Omega))))))+(-8.*((iac**2)*((k**2)+aux4)))
    aux6=(-42.*((Delta**2)*Omega))+((-117.*(Delta*(Omega**2)))+(74.*(Omega**3.)))
    aux7=(k*((-444.*(Delta**2))+((336.*(Delta*Omega))+(468.*(Omega**2)))))+((0.+-8.j)*((37.*(Delta**3.))+aux6))
    aux8=(0.+-4.j)*((37.*(k**3.))+(((0.+6.j)*((k**2)*((37.*Delta)+(-14.*Omega))))+aux7))
    aux9=(5.*((G3**2)*((iac**6.)*((26.*Delta)+(((0.+-13.j)*k)+(-3.*Omega))))))+aux8
    aux10=((0.+20.j)*(k*((13.*Delta)+(5.*Omega))))+(-4.*((65.*(Delta**2))+((50.*(Delta*Omega))+(-231.*(Omega**2)))))
    aux11=-12.*((k**2)*((10.*(Delta**2))+((-15.*(Delta*Omega))+(-9.*(Omega**2)))))
    aux12=(-45.*((Delta**2)*Omega))+((-54.*(Delta*(Omega**2)))+(95.*(Omega**3.)))
    aux13=(-27.*((Delta**2)*(Omega**2)))+((95.*(Delta*(Omega**3.)))+(-42.*(Omega**4.)))
    aux14=((0.+-8.j)*(k*((20.*(Delta**3.))+aux12)))+(16.*((5.*(Delta**4.))+((-15.*((Delta**3.)*Omega))+aux13)))
    aux15=(5.*(k**4.))+(((0.+10.j)*((k**3.)*((4.*Delta)+(-3.*Omega))))+(aux11+aux14))
    aux16=(G3**2)*((iac**4.)*(((G3**2)*((iac**6.)*((65.*(k**2))+aux10)))+(16.*aux15)))
    aux17=((0.+2.j)*(k*((550.*Delta)+(-119.*Omega))))+((476.*(Delta*Omega))+(1832.*(Omega**2)))
    aux18=(5.*(Delta**3.))+((-6.*((Delta**2)*Omega))+((-15.*(Delta*(Omega**2)))+(10.*(Omega**3.))))
    aux19=(-30.*((Delta**2)*(Omega**2)))+((40.*(Delta*(Omega**3.)))+(9.*(Omega**4.)))
    aux20=((0.+-32.j)*(k*aux18))+(16.*((5.*(Delta**4.))+((-8.*((Delta**3.)*Omega))+aux19)))
    aux21=(-24.*((k**2)*((5.*(Delta**2))+((-4.*(Delta*Omega))+(-5.*(Omega**2))))))+aux20
    aux22=128.*((5.*(k**4.))+(((0.+8.j)*((k**3.)*((5.*Delta)+(-2.*Omega))))+aux21))
    aux23=(4.*((G3**2)*((iac**6.)*((-1100.*(Delta**2))+((275.*(k**2))+aux17)))))+aux22
    aux24=5.*((G3**4.)*((iac**12.)*(((0.+67.j)*k)+(-2.*((67.*Delta)+(9.*Omega))))))
    aux25=(0.+-4.j)*(k*((162.*(Delta**2))+((-141.*(Delta*Omega))+(-194.*(Omega**2)))))
    aux26=(-141.*((Delta**2)*Omega))+((-388.*(Delta*(Omega**2)))+(333.*(Omega**3.)))
    aux27=((k**2)*((-324.*Delta)+(141.*Omega)))+(aux25+(4.*((108.*(Delta**3.))+aux26)))
    aux28=(5.*(Delta**3.))+((-6.*((Delta**2)*Omega))+((-15.*(Delta*(Omega**2)))+(10.*(Omega**3.))))
    aux29=(-30.*((Delta**2)*(Omega**2)))+((40.*(Delta*(Omega**3.)))+(9.*(Omega**4.)))
    aux30=(20.*((Delta**2)*(Omega**3.)))+((9.*(Delta*(Omega**4.)))+(-18.*(Omega**5.)))
    aux31=(Delta**5.)+((-2.*((Delta**4.)*Omega))+((-10.*((Delta**3.)*(Omega**2)))+aux30))
    aux32=(16.*(k*((5.*(Delta**4.))+((-8.*((Delta**3.)*Omega))+aux29))))+((0.+32.j)*aux31)
    aux33=(-8.*((k**3.)*((5.*(Delta**2))+((-4.*(Delta*Omega))+(-5.*(Omega**2))))))+(((0.+-16.j)*((k**2)*aux28))+aux32)
    aux34=(0.+256.j)*((k**5.)+(((0.+2.j)*((k**4.)*((5.*Delta)+(-2.*Omega))))+aux33))
    aux35=G2*(aux24+((32.*((G3**2)*((iac**6.)*(((0.+54.j)*(k**3.))+aux27))))+aux34))
    aux36=((0.+4.j)*(k*((41.*Delta)+(20.*Omega))))+(-4.*((41.*(Delta**2))+((40.*(Delta*Omega))+(-189.*(Omega**2)))))
    aux37=(4.*(Delta**3.))+((-9.*((Delta**2)*Omega))+((-14.*(Delta*(Omega**2)))+(27.*(Omega**3.))))
    aux38=(-7.*((Delta**2)*(Omega**2)))+((27.*(Delta*(Omega**3.)))+(-18.*(Omega**4.)))
    aux39=((0.+-8.j)*(k*aux37))+(16.*((Delta**4.)+((-3.*((Delta**3.)*Omega))+aux38)))
    aux40=(-4.*((k**2)*((6.*(Delta**2))+((-9.*(Delta*Omega))+(-7.*(Omega**2))))))+aux39
    aux41=(4.*(Delta**3.))+((-3.*((Delta**2)*Omega))+((-20.*(Delta*(Omega**2)))+(15.*(Omega**3.))))
    aux42=(k*((-24.*(Delta**2))+((12.*(Delta*Omega))+(40.*(Omega**2)))))+((0.+-4.j)*aux41)
    aux43=(0.+-64.j)*((iac**2)*((2.*(k**3.))+(((0.+3.j)*((k**2)*((4.*Delta)-Omega)))+aux42)))
    aux44=((G3**2)*((iac**8.)*((410.*Delta)+(((0.+-205.j)*k)+(-2.*Omega)))))+aux43
    aux45=(64.*((k**4.)+(((0.+2.j)*((k**3.)*((4.*Delta)+(-3.*Omega))))+aux40)))+(2.*(G2*aux44))
    aux46=(16.*((G2**3.)*((iac**6.)*((-24.*Delta)+(((0.+12.j)*k)+(5.*Omega))))))+((12.*((G3**2)*((iac**6.)*((41.*(k**2))+aux36))))+aux45)
    aux47=(23.*(k**2))+((8.*(Delta*Omega))+(((0.+-4.j)*(k*Omega))+(220.*(Omega**2))))
    aux48=(65.*((G3**2)*(iac**6.)))+(16.*((-92.*(Delta**2))+(((0.+92.j)*(Delta*k))+aux47)))
    aux49=(G1**2)*(((28.*((G2**4.)*(iac**8.)))+aux46)-((G2**2)*((iac**4.)*aux48)))
    aux50=((0.+10.j)*(k*((8.*Delta)-Omega)))+((20.*(Delta*Omega))+(157.*(Omega**2)))
    aux51=(65.*((G3**2)*(iac**6.)))+(64.*((-80.*(Delta**2))+((20.*(k**2))+aux50)))
    aux52=(0.+5.j)*((G3**2)*((iac**8.)*(((0.+86.j)*Delta)+((43.*k)+((0.+8.j)*Omega)))))
    aux53=(-16.*((Delta**2)*Omega))+((-62.*(Delta*(Omega**2)))+(49.*(Omega**3.)))
    aux54=(-4.*(k*((45.*(Delta**2))+((-32.*(Delta*Omega))+(-62.*(Omega**2))))))+((0.+-8.j)*((15.*(Delta**3.))+aux53))
    aux55=(iac**2)*((15.*(k**3.))+(((0.+2.j)*((k**2)*((45.*Delta)+(-16.*Omega))))+aux54))
    aux56=(-460.*(Delta*Omega))+((2064.*(Omega**2))+((0.+2.j)*(k*((254.*Delta)+(115.*Omega)))))
    aux57=(4.*(Delta**3.))+((-9.*((Delta**2)*Omega))+((-12.*(Delta*(Omega**2)))+(22.*(Omega**3.))))
    aux58=(-6.*((Delta**2)*(Omega**2)))+((22.*(Delta*(Omega**3.)))+(-12.*(Omega**4.)))
    aux59=((0.+-8.j)*(k*aux57))+(16.*((Delta**4.)+((-3.*((Delta**3.)*Omega))+aux58)))
    aux60=((k**2)*((-24.*(Delta**2))+((36.*(Delta*Omega))+(24.*(Omega**2)))))+aux59
    aux61=((G3**2)*((iac**6.)*((-508.*(Delta**2))+((127.*(k**2))+aux56))))+(64.*((k**4.)+(((0.+2.j)*((k**3.)*((4.*Delta)+(-3.*Omega))))+aux60)))
    aux62=((G2**2)*((iac**4.)*aux51))+((2.*(G2*(aux52+((0.+32.j)*aux55))))+(-4.*aux61))
    aux63=(16.*((G2**3.)*((iac**6.)*((78.*Delta)+(((0.+-39.j)*k)+(-8.*Omega))))))+aux62
    aux64=(-8.*aux49)+(4.*(G1*(G3*((iac**2)*((-80.*((G2**4.)*(iac**8.)))+aux63)))))
    aux65=(2.*((G2**2)*((iac**2)*((25.*((G3**4.)*(iac**12.)))+aux23))))+(aux35+aux64)
    aux66=(128.*((G1**4.)*(((G2**2)*(iac**6.))+aux5)))+((16.*((G2**3.)*((iac**4.)*aux9)))+((-6.*aux16)+aux65))
    aux67=(64.*((G1**3.)*(G3*((iac**4.)*((7.*((G2**2)*(iac**4.)))+aux3)))))+aux66
    aux68=(80.*((G2**5.)*((iac**8.)*((-18.*Delta)+(((0.+9.j)*k)+(4.*Omega))))))+((-2.*((G2**4.)*((iac**6.)*aux1)))+aux67)
    aux69=-24.*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux70=(4.*((G2**2)*(iac**4.)))+(((0.+23.j)*(G2*((iac**2)*(((0.+2.j)*Delta)+k))))+aux69)
    aux71=(iac**4.)*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux72=(3.*((G2**2)*(iac**8.)))+(((0.+16.j)*(G2*((iac**6.)*(((0.+2.j)*Delta)+k))))+(-16.*aux71))
    aux73=(-68.*(Delta**2))+(((0.+68.j)*(Delta*k))+((17.*(k**2))+(194.*(Omega**2))))
    aux74=(iac**6.)*(((2.*Delta)+((0.+-1.j)*k))*((125.*((G3**2)*(iac**6.)))+(32.*aux73)))
    aux75=(-676.*(Delta**2))+(((0.+676.j)*(Delta*k))+((169.*(k**2))+(672.*(Omega**2))))
    aux76=(-32.*(Delta**2))+(((0.+32.j)*(Delta*k))+((8.*(k**2))+(65.*(Omega**2))))
    aux77=16.*((3.*(Delta**4.))+((-28.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux78=(-8.*((k**2)*((9.*(Delta**2))+(-14.*(Omega**2)))))+(((0.+-32.j)*(k*((3.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+aux77)
    aux79=(128.*((G3**2)*((iac**6.)*aux76)))+(256.*(((0.+24.j)*(Delta*(k**3.)))+((3.*(k**4.))+aux78)))
    aux80=G2*((iac**2)*((((0.+2.j)*Delta)+k)*((145.*((G3**4.)*(iac**12.)))+aux79)))
    aux81=(-580.*(Delta**2))+(((0.+580.j)*(Delta*k))+((145.*(k**2))+(712.*(Omega**2))))
    aux82=16.*((57.*(Delta**4.))+((-321.*((Delta**2)*(Omega**2)))+(184.*(Omega**4.))))
    aux83=((k**2)*((-1368.*(Delta**2))+(1284.*(Omega**2))))+(((0.+-48.j)*(k*((38.*(Delta**3.))+(-107.*(Delta*(Omega**2))))))+aux82)
    aux84=(64.*((G3**2)*((iac**6.)*aux81)))+(256.*(((0.+456.j)*(Delta*(k**3.)))+((57.*(k**4.))+aux83)))
    aux85=(-1300.*(Delta**2))+(((0.+1300.j)*(Delta*k))+((325.*(k**2))+(4356.*(Omega**2))))
    aux86=16.*((19.*(Delta**4.))+((-29.*((Delta**2)*(Omega**2)))+(-198.*(Omega**4.))))
    aux87=((k**2)*((-456.*(Delta**2))+(116.*(Omega**2))))+(((0.+-16.j)*(k*((38.*(Delta**3.))+(-29.*(Delta*(Omega**2))))))+aux86)
    aux88=(G3**2)*((iac**6.)*(((0.+152.j)*(Delta*(k**3.)))+((19.*(k**4.))+aux87)))
    aux89=(k**2)*((15.*(Delta**4.))+((-84.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux90=(3.*(Delta**5.))+((-28.*((Delta**3.)*(Omega**2)))+(49.*(Delta*(Omega**4.))))
    aux91=(-14.*((Delta**4.)*(Omega**2)))+((49.*((Delta**2)*(Omega**4.)))+(-36.*(Omega**6.)))
    aux92=((0.+-32.j)*((k**3.)*((5.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+((16.*aux89)+(((0.+64.j)*(k*aux90))+(-64.*((Delta**6.)+aux91))))
    aux93=((0.+12.j)*(Delta*(k**5.)))+((k**6.)+(((k**4.)*((-60.*(Delta**2))+(56.*(Omega**2))))+aux92))
    aux94=(-188.*(Delta**2))+(((0.+188.j)*(Delta*k))+((47.*(k**2))+(252.*(Omega**2))))
    aux95=(-164.*(Delta**2))+(((0.+164.j)*(Delta*k))+((41.*(k**2))+(324.*(Omega**2))))
    aux96=(iac**2)*((((0.+2.j)*Delta)+k)*((195.*((G3**2)*(iac**6.)))+(16.*aux95)))
    aux97=(-12.*(Delta**2))+(((0.+12.j)*(Delta*k))+((3.*(k**2))+(44.*(Omega**2))))
    aux98=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux99=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux98))
    aux100=((0.+1.j)*(G2*aux96))+(-24.*((3.*((G3**2)*((iac**6.)*aux97)))+(8.*aux99)))
    aux101=(2.*((G2**2)*((iac**4.)*((15.*((G3**2)*(iac**6.)))+(8.*aux94)))))+aux100
    aux102=(-40.*((G2**4.)*(iac**8.)))+((328.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+aux101)
    aux103=(-28.*(Delta**2))+(((0.+28.j)*(Delta*k))+((7.*(k**2))+(60.*(Omega**2))))
    aux104=(iac**2)*((((0.+2.j)*Delta)+k)*((25.*((G3**2)*(iac**6.)))+(4.*aux103)))
    aux105=(-132.*(Delta**2))+(((0.+132.j)*(Delta*k))+((33.*(k**2))+(200.*(Omega**2))))
    aux106=(-36.*(Delta**2))+(((0.+36.j)*(Delta*k))+((9.*(k**2))+(140.*(Omega**2))))
    aux107=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux108=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux107))
    aux109=((G2**2)*((iac**4.)*((65.*((G3**2)*(iac**6.)))+(16.*aux105))))+(-16.*((3.*((G3**2)*((iac**6.)*aux106)))+(8.*aux108)))
    aux110=(240.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+(((0.+16.j)*(G2*aux104))+aux109)
    aux111=(32.*(G1*(G3*((iac**4.)*aux102))))+(32.*((G1**2)*((iac**2)*((-32.*((G2**4.)*(iac**8.)))+aux110))))
    aux112=(-4.*(((G3**4.)*((iac**12.)*aux85))+((32.*aux88)+(256.*aux93))))+aux111
    aux113=((0.+8.j)*aux80)+(((G2**2)*((iac**4.)*((175.*((G3**4.)*(iac**12.)))+aux84)))+aux112)
    aux114=(-32.*((G2**4.)*((iac**8.)*((15.*((G3**2)*(iac**6.)))+(2.*aux75)))))+aux113
    aux115=(512.*((G1**3.)*(G3*((iac**6.)*aux70))))+((256.*((G1**4.)*aux72))+((32.*((G2**3.)*aux74))+aux114))
    aux116=(320.*((G2**6.)*(iac**12.)))+(((0.+3200.j)*((G2**5.)*((iac**10.)*(((0.+2.j)*Delta)+k))))+aux115)
    output=(-2.*(a0*((iac**2)*((80.*((G2**6.)*(iac**10.)))+aux68))))/aux116
    return output


def am3_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    k=ktot
    aux0=(iac**4.)*((13.*(G2*(iac**2)))+(8.*((-14.*Delta)+(((0.+7.j)*k)+(-26.*Omega)))))
    aux1=(G1**5.)*((iac**2)*((G2*(iac**2))+(((0.+4.j)*k)+(-8.*(Delta+(2.*Omega))))))
    aux2=(0.+9.j)*((G3**2)*((iac**6.)*(((0.+34.j)*Delta)+((17.*k)+((0.+58.j)*Omega)))))
    aux3=(Delta**3.)+((6.*((Delta**2)*Omega))+((11.*(Delta*(Omega**2)))+(6.*(Omega**3.))))
    aux4=(-4.*(k*((3.*(Delta**2))+((12.*(Delta*Omega))+(11.*(Omega**2))))))+((0.+-8.j)*aux3)
    aux5=((0.+6.j)*(k*((6.*Delta)+(7.*Omega))))+(-4.*((9.*(Delta**2))+((21.*(Delta*Omega))+(4.*(Omega**2)))))
    aux6=((0.+16.j)*((k**3.)+(((0.+6.j)*((k**2)*(Delta+(2.*Omega))))+aux4)))+(G2*((33.*((G3**2)*(iac**8.)))+(8.*((iac**2)*((9.*(k**2))+aux5)))))
    aux7=(4.*((G2**2)*((iac**4.)*((34.*Delta)+(((0.+-17.j)*k)+(46.*Omega))))))+aux6
    aux8=2.*((G3**2)*((iac**6.)*((-814.*Delta)+(((0.+407.j)*k)+(-1262.*Omega)))))
    aux9=(7.*(Delta**3.))+((54.*((Delta**2)*Omega))+((97.*(Delta*(Omega**2)))+(34.*(Omega**3.))))
    aux10=(-4.*(k*((21.*(Delta**2))+((108.*(Delta*Omega))+(97.*(Omega**2))))))+((0.+-8.j)*aux9)
    aux11=(0.+32.j)*((7.*(k**3.))+(((0.+6.j)*((k**2)*((7.*Delta)+(18.*Omega))))+aux10))
    aux12=((0.+2.j)*(k*((66.*Delta)+(83.*Omega))))+(-4.*((33.*(Delta**2))+((83.*(Delta*Omega))+(15.*(Omega**2)))))
    aux13=aux11+(G2*((165.*((G3**2)*(iac**8.)))+(32.*((iac**2)*((33.*(k**2))+aux12)))))
    aux14=(16.*((G2**2)*((iac**4.)*((122.*Delta)+(((0.+-61.j)*k)+(155.*Omega))))))+aux13
    aux15=4.*((G1**2)*(G3*((iac**2)*((-156.*((G2**3.)*(iac**6.)))+(aux8+aux14)))))
    aux16=(0.+128.j)*((G2**4.)*((iac**6.)*(((0.+16.j)*Delta)+((8.*k)+((0.+15.j)*Omega)))))
    aux17=(17.*(k**2))+((-134.*(Delta*Omega))+(((0.+67.j)*(k*Omega))+(8.*(Omega**2))))
    aux18=(45.*((G3**2)*(iac**6.)))+(16.*((-68.*(Delta**2))+(((0.+68.j)*(Delta*k))+aux17)))
    aux19=(14.*(Delta**3.))+((45.*((Delta**2)*Omega))+((9.*(Delta*(Omega**2)))+(-36.*(Omega**3.))))
    aux20=(-6.*(k*((14.*(Delta**2))+((30.*(Delta*Omega))+(3.*(Omega**2))))))+((0.+-4.j)*aux19)
    aux21=(iac**2)*((7.*(k**3.))+(((0.+3.j)*((k**2)*((14.*Delta)+(15.*Omega))))+aux20))
    aux22=((G3**2)*((iac**8.)*((582.*Delta)+(((0.+-291.j)*k)+(722.*Omega)))))+((0.+-32.j)*aux21)
    aux23=(5.*(Delta**3.))+((54.*((Delta**2)*Omega))+((95.*(Delta*(Omega**2)))+(14.*(Omega**3.))))
    aux24=(-4.*(k*((15.*(Delta**2))+((108.*(Delta*Omega))+(95.*(Omega**2))))))+((0.+-8.j)*aux23)
    aux25=16.*((5.*(k**3.))+(((0.+6.j)*((k**2)*((5.*Delta)+(18.*Omega))))+aux24))
    aux26=(35.*((G3**2)*((iac**6.)*((5.*k)+((0.+2.j)*((5.*Delta)+(7.*Omega)))))))+aux25
    aux27=((0.+4.j)*(k*((157.*Delta)+(225.*Omega))))+(-4.*((157.*(Delta**2))+((450.*(Delta*Omega))+(85.*(Omega**2)))))
    aux28=(8.*(Delta**3.))+((27.*((Delta**2)*Omega))+((8.*(Delta*(Omega**2)))+(-21.*(Omega**3.))))
    aux29=(4.*((Delta**2)*(Omega**2)))+((-21.*(Delta*(Omega**3.)))+(-18.*(Omega**4.)))
    aux30=((0.+-4.j)*(k*aux28))+(8.*((2.*(Delta**4.))+((9.*((Delta**3.)*Omega))+aux29)))
    aux31=(-2.*((k**2)*((12.*(Delta**2))+((27.*(Delta*Omega))+(4.*(Omega**2))))))+aux30
    aux32=(16.*((G3**2)*((iac**6.)*((157.*(k**2))+aux27))))+(512.*((k**4.)+(((0.+1.j)*((k**3.)*((8.*Delta)+(9.*Omega))))+aux31)))
    aux33=((0.+6.j)*((G3**2)*((iac**4.)*aux26)))+(G2*((205.*((G3**4.)*(iac**12.)))+aux32))
    aux34=aux16+((-8.*((G2**3.)*((iac**4.)*aux18)))+((8.*((G2**2)*aux22))+aux33))
    aux35=((0.+10.j)*(k*((6.*Delta)+(11.*Omega))))+(-4.*((15.*(Delta**2))+((55.*(Delta*Omega))+(12.*(Omega**2)))))
    aux36=(G2**3.)*((iac**6.)*((-65.*((G3**2)*(iac**6.)))+(-32.*((15.*(k**2))+aux35))))
    aux37=(3.*(Delta**3.))+((63.*((Delta**2)*Omega))+((84.*(Delta*(Omega**2)))+(-50.*(Omega**3.))))
    aux38=((0.+12.j)*(k*((3.*(Delta**2))+((42.*(Delta*Omega))+(28.*(Omega**2))))))+(-8.*aux37)
    aux39=(35.*((G3**2)*((iac**6.)*((6.*Delta)+(((0.+-3.j)*k)+(8.*Omega))))))+(8.*(((0.+-3.j)*(k**3.))+((18.*((k**2)*(Delta+(7.*Omega))))+aux38)))
    aux40=((0.+3.j)*(k*((72.*Delta)+(133.*Omega))))+(-2.*((108.*(Delta**2))+((399.*(Delta*Omega))+(101.*(Omega**2)))))
    aux41=(16.*(Delta**3.))+((-9.*((Delta**2)*Omega))+((-84.*(Delta*(Omega**2)))+(3.*(Omega**3.))))
    aux42=(-42.*((Delta**2)*(Omega**2)))+((3.*(Delta*(Omega**3.)))+(62.*(Omega**4.)))
    aux43=((0.+-4.j)*(k*aux41))+(8.*((4.*(Delta**4.))+((-3.*((Delta**3.)*Omega))+aux42)))
    aux44=((k**2)*((-48.*(Delta**2))+((18.*(Delta*Omega))+(84.*(Omega**2)))))+aux43
    aux45=(iac**2)*((2.*(k**4.))+(((0.+1.j)*((k**3.)*((16.*Delta)+(-3.*Omega))))+aux44))
    aux46=(25.*((G3**4.)*(iac**14.)))+((8.*((G3**2)*((iac**8.)*((54.*(k**2))+aux40))))+(-128.*aux45))
    aux47=(0.+-4.j)*(k*((21.*(Delta**2))+((312.*(Delta*Omega))+(283.*(Omega**2)))))
    aux48=(156.*((Delta**2)*Omega))+((283.*(Delta*(Omega**2)))+(-6.*(Omega**3.)))
    aux49=(-6.*((k**2)*((7.*Delta)+(52.*Omega))))+(aux47+(8.*((7.*(Delta**3.))+aux48)))
    aux50=-4.*((k**3.)*((10.*(Delta**2))+((12.*(Delta*Omega))+(-5.*(Omega**2)))))
    aux51=(18.*((Delta**2)*Omega))+((-15.*(Delta*(Omega**2)))+(-15.*(Omega**3.)))
    aux52=(-15.*((Delta**2)*(Omega**2)))+((-30.*(Delta*(Omega**3.)))+(4.*(Omega**4.)))
    aux53=(-15.*((Delta**2)*(Omega**3.)))+((4.*(Delta*(Omega**4.)))+(12.*(Omega**5.)))
    aux54=(Delta**5.)+((3.*((Delta**4.)*Omega))+((-5.*((Delta**3.)*(Omega**2)))+aux53))
    aux55=(16.*(k*((5.*(Delta**4.))+((12.*((Delta**3.)*Omega))+aux52))))+((0.+32.j)*aux54)
    aux56=((0.+2.j)*((k**4.)*((5.*Delta)+(3.*Omega))))+(aux50+(((0.+-8.j)*((k**2)*((10.*(Delta**3.))+aux51)))+aux55))
    aux57=(4.*((G3**2)*((iac**6.)*(((0.+7.j)*(k**3.))+aux49))))+((0.+-64.j)*((k**5.)+aux56))
    aux58=(5.*((G3**4.)*((iac**12.)*((-26.*Delta)+(((0.+13.j)*k)+(-33.*Omega))))))+aux57
    aux59=(8.*((G2**4.)*((iac**8.)*((-74.*Delta)+(((0.+37.j)*k)+(-100.*Omega))))))+(aux36+((4.*((G2**2)*((iac**4.)*aux39)))+((G2*aux46)+(2.*aux58))))
    aux60=(G1*((128.*((G2**5.)*(iac**8.)))+aux34))+(G3*((40.*((G2**5.)*(iac**10.)))+aux59))
    aux61=(32.*((G1**3.)*((-12.*((G2**3.)*(iac**6.)))+(aux2+aux7))))+(aux15+aux60)
    aux62=-24.*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux63=(4.*((G2**2)*(iac**4.)))+(((0.+23.j)*(G2*((iac**2)*(((0.+2.j)*Delta)+k))))+aux62)
    aux64=(iac**4.)*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux65=(3.*((G2**2)*(iac**8.)))+(((0.+16.j)*(G2*((iac**6.)*(((0.+2.j)*Delta)+k))))+(-16.*aux64))
    aux66=(-68.*(Delta**2))+(((0.+68.j)*(Delta*k))+((17.*(k**2))+(194.*(Omega**2))))
    aux67=(iac**6.)*(((2.*Delta)+((0.+-1.j)*k))*((125.*((G3**2)*(iac**6.)))+(32.*aux66)))
    aux68=(-676.*(Delta**2))+(((0.+676.j)*(Delta*k))+((169.*(k**2))+(672.*(Omega**2))))
    aux69=(-32.*(Delta**2))+(((0.+32.j)*(Delta*k))+((8.*(k**2))+(65.*(Omega**2))))
    aux70=16.*((3.*(Delta**4.))+((-28.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux71=(-8.*((k**2)*((9.*(Delta**2))+(-14.*(Omega**2)))))+(((0.+-32.j)*(k*((3.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+aux70)
    aux72=(128.*((G3**2)*((iac**6.)*aux69)))+(256.*(((0.+24.j)*(Delta*(k**3.)))+((3.*(k**4.))+aux71)))
    aux73=G2*((iac**2)*((((0.+2.j)*Delta)+k)*((145.*((G3**4.)*(iac**12.)))+aux72)))
    aux74=(-580.*(Delta**2))+(((0.+580.j)*(Delta*k))+((145.*(k**2))+(712.*(Omega**2))))
    aux75=16.*((57.*(Delta**4.))+((-321.*((Delta**2)*(Omega**2)))+(184.*(Omega**4.))))
    aux76=((k**2)*((-1368.*(Delta**2))+(1284.*(Omega**2))))+(((0.+-48.j)*(k*((38.*(Delta**3.))+(-107.*(Delta*(Omega**2))))))+aux75)
    aux77=(64.*((G3**2)*((iac**6.)*aux74)))+(256.*(((0.+456.j)*(Delta*(k**3.)))+((57.*(k**4.))+aux76)))
    aux78=(-1300.*(Delta**2))+(((0.+1300.j)*(Delta*k))+((325.*(k**2))+(4356.*(Omega**2))))
    aux79=16.*((19.*(Delta**4.))+((-29.*((Delta**2)*(Omega**2)))+(-198.*(Omega**4.))))
    aux80=((k**2)*((-456.*(Delta**2))+(116.*(Omega**2))))+(((0.+-16.j)*(k*((38.*(Delta**3.))+(-29.*(Delta*(Omega**2))))))+aux79)
    aux81=(G3**2)*((iac**6.)*(((0.+152.j)*(Delta*(k**3.)))+((19.*(k**4.))+aux80)))
    aux82=(k**2)*((15.*(Delta**4.))+((-84.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux83=(3.*(Delta**5.))+((-28.*((Delta**3.)*(Omega**2)))+(49.*(Delta*(Omega**4.))))
    aux84=(-14.*((Delta**4.)*(Omega**2)))+((49.*((Delta**2)*(Omega**4.)))+(-36.*(Omega**6.)))
    aux85=((0.+-32.j)*((k**3.)*((5.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+((16.*aux82)+(((0.+64.j)*(k*aux83))+(-64.*((Delta**6.)+aux84))))
    aux86=((0.+12.j)*(Delta*(k**5.)))+((k**6.)+(((k**4.)*((-60.*(Delta**2))+(56.*(Omega**2))))+aux85))
    aux87=(-188.*(Delta**2))+(((0.+188.j)*(Delta*k))+((47.*(k**2))+(252.*(Omega**2))))
    aux88=(-164.*(Delta**2))+(((0.+164.j)*(Delta*k))+((41.*(k**2))+(324.*(Omega**2))))
    aux89=(iac**2)*((((0.+2.j)*Delta)+k)*((195.*((G3**2)*(iac**6.)))+(16.*aux88)))
    aux90=(-12.*(Delta**2))+(((0.+12.j)*(Delta*k))+((3.*(k**2))+(44.*(Omega**2))))
    aux91=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux92=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux91))
    aux93=((0.+1.j)*(G2*aux89))+(-24.*((3.*((G3**2)*((iac**6.)*aux90)))+(8.*aux92)))
    aux94=(2.*((G2**2)*((iac**4.)*((15.*((G3**2)*(iac**6.)))+(8.*aux87)))))+aux93
    aux95=(-40.*((G2**4.)*(iac**8.)))+((328.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+aux94)
    aux96=(-28.*(Delta**2))+(((0.+28.j)*(Delta*k))+((7.*(k**2))+(60.*(Omega**2))))
    aux97=G2*((iac**2)*((((0.+2.j)*Delta)+k)*((25.*((G3**2)*(iac**6.)))+(4.*aux96))))
    aux98=(-132.*(Delta**2))+(((0.+132.j)*(Delta*k))+((33.*(k**2))+(200.*(Omega**2))))
    aux99=(-36.*(Delta**2))+(((0.+36.j)*(Delta*k))+((9.*(k**2))+(140.*(Omega**2))))
    aux100=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux101=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux100))
    aux102=((G2**2)*((iac**4.)*((65.*((G3**2)*(iac**6.)))+(16.*aux98))))+(-16.*((3.*((G3**2)*((iac**6.)*aux99)))+(8.*aux101)))
    aux103=(240.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+(((0.+16.j)*aux97)+aux102)
    aux104=(32.*(G1*(G3*((iac**4.)*aux95))))+(32.*((G1**2)*((iac**2)*((-32.*((G2**4.)*(iac**8.)))+aux103))))
    aux105=(-4.*(((G3**4.)*((iac**12.)*aux78))+((32.*aux81)+(256.*aux86))))+aux104
    aux106=((0.+8.j)*aux73)+(((G2**2)*((iac**4.)*((175.*((G3**4.)*(iac**12.)))+aux77)))+aux105)
    aux107=(-32.*((G2**4.)*((iac**8.)*((15.*((G3**2)*(iac**6.)))+(2.*aux68)))))+aux106
    aux108=(512.*((G1**3.)*(G3*((iac**6.)*aux63))))+((256.*((G1**4.)*aux65))+((32.*((G2**3.)*aux67))+aux107))
    aux109=(320.*((G2**6.)*(iac**12.)))+(((0.+3200.j)*((G2**5.)*((iac**10.)*(((0.+2.j)*Delta)+k))))+aux108)
    output=(2.*(a0*((iac**3.)*((64.*((G1**4.)*(G3*aux0)))+((256.*aux1)+aux61)))))/aux109
    return output


def ap3_third_order(iac, Omega, G1, G2, G3, kext, ktot, Sin, Delta, a0_calc):
    a0 = c_a0(kext, ktot, Sin, Delta, a0_calc)
    k=ktot
    aux0=(G1**5.)*((iac**2)*((-8.*Delta)+((G2*(iac**2))+(((0.+4.j)*k)+(16.*Omega)))))
    aux1=(iac**4.)*((13.*(G2*(iac**2)))+(8.*((-14.*Delta)+(((0.+7.j)*k)+(26.*Omega)))))
    aux2=(Delta**3.)+((-6.*((Delta**2)*Omega))+((11.*(Delta*(Omega**2)))+(-6.*(Omega**3.))))
    aux3=(-4.*(k*((3.*(Delta**2))+((-12.*(Delta*Omega))+(11.*(Omega**2))))))+((0.+-8.j)*aux2)
    aux4=((0.+6.j)*(k*((6.*Delta)+(-7.*Omega))))+(-4.*((9.*(Delta**2))+((-21.*(Delta*Omega))+(4.*(Omega**2)))))
    aux5=((0.+16.j)*((k**3.)+(((0.+6.j)*((k**2)*(Delta+(-2.*Omega))))+aux3)))+(G2*((33.*((G3**2)*(iac**8.)))+(8.*((iac**2)*((9.*(k**2))+aux4)))))
    aux6=(9.*((G3**2)*((iac**6.)*((-34.*Delta)+(((0.+17.j)*k)+(58.*Omega))))))+aux5
    aux7=(4.*((G2**2)*((iac**4.)*((34.*Delta)+(((0.+-17.j)*k)+(-46.*Omega))))))+aux6
    aux8=16.*((G2**2)*((iac**4.)*((122.*Delta)+(((0.+-61.j)*k)+(-155.*Omega)))))
    aux9=2.*((G3**2)*((iac**6.)*((-814.*Delta)+(((0.+407.j)*k)+(1262.*Omega)))))
    aux10=(-54.*((Delta**2)*Omega))+((97.*(Delta*(Omega**2)))+(-34.*(Omega**3.)))
    aux11=(-4.*(k*((21.*(Delta**2))+((-108.*(Delta*Omega))+(97.*(Omega**2))))))+((0.+-8.j)*((7.*(Delta**3.))+aux10))
    aux12=(0.+32.j)*((7.*(k**3.))+(((0.+6.j)*((k**2)*((7.*Delta)+(-18.*Omega))))+aux11))
    aux13=((0.+2.j)*(k*((66.*Delta)+(-83.*Omega))))+(-4.*((33.*(Delta**2))+((-83.*(Delta*Omega))+(15.*(Omega**2)))))
    aux14=aux12+(G2*((165.*((G3**2)*(iac**8.)))+(32.*((iac**2)*((33.*(k**2))+aux13)))))
    aux15=(G1**2)*(G3*((iac**2)*((-156.*((G2**3.)*(iac**6.)))+(aux8+(aux9+aux14)))))
    aux16=((0.+1.j)*(k*((68.*Delta)+(-67.*Omega))))+((134.*(Delta*Omega))+(8.*(Omega**2)))
    aux17=(45.*((G3**2)*(iac**6.)))+(16.*((-68.*(Delta**2))+((17.*(k**2))+aux16)))
    aux18=(0.+-64.j)*(k*((15.*(Delta**2))+((-108.*(Delta*Omega))+(95.*(Omega**2)))))
    aux19=(-54.*((Delta**2)*Omega))+((95.*(Delta*(Omega**2)))+(-14.*(Omega**3.)))
    aux20=(35.*((G3**2)*((iac**6.)*((-10.*Delta)+(((0.+5.j)*k)+(14.*Omega))))))+(aux18+(128.*((5.*(Delta**3.))+aux19)))
    aux21=(iac**4.)*(((0.+80.j)*(k**3.))+((-96.*((k**2)*((5.*Delta)+(-18.*Omega))))+aux20))
    aux22=(14.*(Delta**3.))+((-45.*((Delta**2)*Omega))+((9.*(Delta*(Omega**2)))+(36.*(Omega**3.))))
    aux23=(-6.*(k*((14.*(Delta**2))+((-30.*(Delta*Omega))+(3.*(Omega**2))))))+((0.+-4.j)*aux22)
    aux24=(0.+-32.j)*((7.*(k**3.))+(((0.+3.j)*((k**2)*((14.*Delta)+(-15.*Omega))))+aux23))
    aux25=((G3**2)*((iac**6.)*((582.*Delta)+(((0.+-291.j)*k)+(-722.*Omega)))))+aux24
    aux26=(157.*(k**2))+((1800.*(Delta*Omega))+(((0.+-900.j)*(k*Omega))+(-340.*(Omega**2))))
    aux27=(G3**2)*((iac**6.)*((-628.*(Delta**2))+(((0.+628.j)*(Delta*k))+aux26)))
    aux28=(8.*(Delta**3.))+((-27.*((Delta**2)*Omega))+((8.*(Delta*(Omega**2)))+(21.*(Omega**3.))))
    aux29=(4.*((Delta**2)*(Omega**2)))+((21.*(Delta*(Omega**3.)))+(-18.*(Omega**4.)))
    aux30=((0.+-4.j)*(k*aux28))+(8.*((2.*(Delta**4.))+((-9.*((Delta**3.)*Omega))+aux29)))
    aux31=((k**2)*((-24.*(Delta**2))+((54.*(Delta*Omega))+(-8.*(Omega**2)))))+aux30
    aux32=(16.*aux27)+(512.*((k**4.)+(((0.+1.j)*((k**3.)*((8.*Delta)+(-9.*Omega))))+aux31)))
    aux33=(8.*((G2**2)*((iac**2)*aux25)))+(G2*((205.*((G3**4.)*(iac**12.)))+aux32))
    aux34=(128.*((G2**4.)*((iac**6.)*((-16.*Delta)+(((0.+8.j)*k)+(15.*Omega))))))+((-8.*((G2**3.)*((iac**4.)*aux17)))+((6.*((G3**2)*aux21))+aux33))
    aux35=((0.+10.j)*(k*((6.*Delta)+(-11.*Omega))))+((220.*(Delta*Omega))+(-48.*(Omega**2)))
    aux36=(-65.*((G3**2)*(iac**6.)))+(-32.*((-60.*(Delta**2))+((15.*(k**2))+aux35)))
    aux37=(0.+12.j)*(k*((3.*(Delta**2))+((-42.*(Delta*Omega))+(28.*(Omega**2)))))
    aux38=(3.*(Delta**3.))+((-63.*((Delta**2)*Omega))+((84.*(Delta*(Omega**2)))+(50.*(Omega**3.))))
    aux39=((0.+-3.j)*(k**3.))+((18.*((k**2)*(Delta+(-7.*Omega))))+(aux37+(-8.*aux38)))
    aux40=(35.*((G3**2)*((iac**6.)*((6.*Delta)+(((0.+-3.j)*k)+(-8.*Omega))))))+(8.*aux39)
    aux41=((0.+3.j)*(k*((72.*Delta)+(-133.*Omega))))+((798.*(Delta*Omega))+(-202.*(Omega**2)))
    aux42=(16.*(Delta**3.))+((9.*((Delta**2)*Omega))+((-84.*(Delta*(Omega**2)))+(-3.*(Omega**3.))))
    aux43=(-42.*((Delta**2)*(Omega**2)))+((-3.*(Delta*(Omega**3.)))+(62.*(Omega**4.)))
    aux44=((0.+-4.j)*(k*aux42))+(8.*((4.*(Delta**4.))+((3.*((Delta**3.)*Omega))+aux43)))
    aux45=(-6.*((k**2)*((8.*(Delta**2))+((3.*(Delta*Omega))+(-14.*(Omega**2))))))+aux44
    aux46=(iac**2)*((2.*(k**4.))+(((0.+1.j)*((k**3.)*((16.*Delta)+(3.*Omega))))+aux45))
    aux47=(8.*((G3**2)*((iac**8.)*((-216.*(Delta**2))+((54.*(k**2))+aux41)))))+(-128.*aux46)
    aux48=(0.+-4.j)*(k*((21.*(Delta**2))+((-312.*(Delta*Omega))+(283.*(Omega**2)))))
    aux49=(-156.*((Delta**2)*Omega))+((283.*(Delta*(Omega**2)))+(6.*(Omega**3.)))
    aux50=(-6.*((k**2)*((7.*Delta)+(-52.*Omega))))+(aux48+(8.*((7.*(Delta**3.))+aux49)))
    aux51=(-18.*((Delta**2)*Omega))+((-15.*(Delta*(Omega**2)))+(15.*(Omega**3.)))
    aux52=(-15.*((Delta**2)*(Omega**2)))+((30.*(Delta*(Omega**3.)))+(4.*(Omega**4.)))
    aux53=(15.*((Delta**2)*(Omega**3.)))+((4.*(Delta*(Omega**4.)))+(-12.*(Omega**5.)))
    aux54=(Delta**5.)+((-3.*((Delta**4.)*Omega))+((-5.*((Delta**3.)*(Omega**2)))+aux53))
    aux55=(16.*(k*((5.*(Delta**4.))+((-12.*((Delta**3.)*Omega))+aux52))))+((0.+32.j)*aux54)
    aux56=((k**3.)*((-40.*(Delta**2))+((48.*(Delta*Omega))+(20.*(Omega**2)))))+(((0.+-8.j)*((k**2)*((10.*(Delta**3.))+aux51)))+aux55)
    aux57=(0.+-64.j)*((k**5.)+(((0.+2.j)*((k**4.)*((5.*Delta)+(-3.*Omega))))+aux56))
    aux58=(5.*((G3**4.)*((iac**12.)*((-26.*Delta)+(((0.+13.j)*k)+(33.*Omega))))))+((4.*((G3**2)*((iac**6.)*(((0.+7.j)*(k**3.))+aux50))))+aux57)
    aux59=(4.*((G2**2)*((iac**4.)*aux40)))+((G2*((25.*((G3**4.)*(iac**14.)))+aux47))+(2.*aux58))
    aux60=(8.*((G2**4.)*((iac**8.)*((-74.*Delta)+(((0.+37.j)*k)+(100.*Omega))))))+(((G2**3.)*((iac**6.)*aux36))+aux59)
    aux61=(G1*((128.*((G2**5.)*(iac**8.)))+aux34))+(G3*((40.*((G2**5.)*(iac**10.)))+aux60))
    aux62=(64.*((G1**4.)*(G3*aux1)))+((32.*((G1**3.)*((-12.*((G2**3.)*(iac**6.)))+aux7)))+((4.*aux15)+aux61))
    aux63=-24.*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux64=(4.*((G2**2)*(iac**4.)))+(((0.+23.j)*(G2*((iac**2)*(((0.+2.j)*Delta)+k))))+aux63)
    aux65=(iac**4.)*((-4.*(Delta**2))+(((0.+4.j)*(Delta*k))+((k**2)+(16.*(Omega**2)))))
    aux66=(3.*((G2**2)*(iac**8.)))+(((0.+16.j)*(G2*((iac**6.)*(((0.+2.j)*Delta)+k))))+(-16.*aux65))
    aux67=(-68.*(Delta**2))+(((0.+68.j)*(Delta*k))+((17.*(k**2))+(194.*(Omega**2))))
    aux68=(iac**6.)*(((2.*Delta)+((0.+-1.j)*k))*((125.*((G3**2)*(iac**6.)))+(32.*aux67)))
    aux69=(-676.*(Delta**2))+(((0.+676.j)*(Delta*k))+((169.*(k**2))+(672.*(Omega**2))))
    aux70=(-32.*(Delta**2))+(((0.+32.j)*(Delta*k))+((8.*(k**2))+(65.*(Omega**2))))
    aux71=16.*((3.*(Delta**4.))+((-28.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux72=(-8.*((k**2)*((9.*(Delta**2))+(-14.*(Omega**2)))))+(((0.+-32.j)*(k*((3.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+aux71)
    aux73=(128.*((G3**2)*((iac**6.)*aux70)))+(256.*(((0.+24.j)*(Delta*(k**3.)))+((3.*(k**4.))+aux72)))
    aux74=G2*((iac**2)*((((0.+2.j)*Delta)+k)*((145.*((G3**4.)*(iac**12.)))+aux73)))
    aux75=(-580.*(Delta**2))+(((0.+580.j)*(Delta*k))+((145.*(k**2))+(712.*(Omega**2))))
    aux76=16.*((57.*(Delta**4.))+((-321.*((Delta**2)*(Omega**2)))+(184.*(Omega**4.))))
    aux77=((k**2)*((-1368.*(Delta**2))+(1284.*(Omega**2))))+(((0.+-48.j)*(k*((38.*(Delta**3.))+(-107.*(Delta*(Omega**2))))))+aux76)
    aux78=(64.*((G3**2)*((iac**6.)*aux75)))+(256.*(((0.+456.j)*(Delta*(k**3.)))+((57.*(k**4.))+aux77)))
    aux79=(-1300.*(Delta**2))+(((0.+1300.j)*(Delta*k))+((325.*(k**2))+(4356.*(Omega**2))))
    aux80=16.*((19.*(Delta**4.))+((-29.*((Delta**2)*(Omega**2)))+(-198.*(Omega**4.))))
    aux81=((k**2)*((-456.*(Delta**2))+(116.*(Omega**2))))+(((0.+-16.j)*(k*((38.*(Delta**3.))+(-29.*(Delta*(Omega**2))))))+aux80)
    aux82=(G3**2)*((iac**6.)*(((0.+152.j)*(Delta*(k**3.)))+((19.*(k**4.))+aux81)))
    aux83=(k**2)*((15.*(Delta**4.))+((-84.*((Delta**2)*(Omega**2)))+(49.*(Omega**4.))))
    aux84=(3.*(Delta**5.))+((-28.*((Delta**3.)*(Omega**2)))+(49.*(Delta*(Omega**4.))))
    aux85=(-14.*((Delta**4.)*(Omega**2)))+((49.*((Delta**2)*(Omega**4.)))+(-36.*(Omega**6.)))
    aux86=((0.+-32.j)*((k**3.)*((5.*(Delta**3.))+(-14.*(Delta*(Omega**2))))))+((16.*aux83)+(((0.+64.j)*(k*aux84))+(-64.*((Delta**6.)+aux85))))
    aux87=((0.+12.j)*(Delta*(k**5.)))+((k**6.)+(((k**4.)*((-60.*(Delta**2))+(56.*(Omega**2))))+aux86))
    aux88=(-188.*(Delta**2))+(((0.+188.j)*(Delta*k))+((47.*(k**2))+(252.*(Omega**2))))
    aux89=(-164.*(Delta**2))+(((0.+164.j)*(Delta*k))+((41.*(k**2))+(324.*(Omega**2))))
    aux90=(iac**2)*((((0.+2.j)*Delta)+k)*((195.*((G3**2)*(iac**6.)))+(16.*aux89)))
    aux91=(-12.*(Delta**2))+(((0.+12.j)*(Delta*k))+((3.*(k**2))+(44.*(Omega**2))))
    aux92=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux93=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux92))
    aux94=((0.+1.j)*(G2*aux90))+(-24.*((3.*((G3**2)*((iac**6.)*aux91)))+(8.*aux93)))
    aux95=(2.*((G2**2)*((iac**4.)*((15.*((G3**2)*(iac**6.)))+(8.*aux88)))))+aux94
    aux96=(-40.*((G2**4.)*(iac**8.)))+((328.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+aux95)
    aux97=(-28.*(Delta**2))+(((0.+28.j)*(Delta*k))+((7.*(k**2))+(60.*(Omega**2))))
    aux98=G2*((iac**2)*((((0.+2.j)*Delta)+k)*((25.*((G3**2)*(iac**6.)))+(4.*aux97))))
    aux99=(-132.*(Delta**2))+(((0.+132.j)*(Delta*k))+((33.*(k**2))+(200.*(Omega**2))))
    aux100=(-36.*(Delta**2))+(((0.+36.j)*(Delta*k))+((9.*(k**2))+(140.*(Omega**2))))
    aux101=((0.+-16.j)*(k*((2.*(Delta**3.))-(Delta*(Omega**2)))))+(16.*(((Delta**4.)+(-12.*(Omega**4.)))-((Delta**2)*(Omega**2))))
    aux102=((0.+8.j)*(Delta*(k**3.)))+((k**4.)+((4.*((k**2)*((-6.*(Delta**2))+(Omega**2))))+aux101))
    aux103=((G2**2)*((iac**4.)*((65.*((G3**2)*(iac**6.)))+(16.*aux99))))+(-16.*((3.*((G3**2)*((iac**6.)*aux100)))+(8.*aux102)))
    aux104=(240.*((G2**3.)*((iac**6.)*((2.*Delta)+((0.+-1.j)*k)))))+(((0.+16.j)*aux98)+aux103)
    aux105=(32.*(G1*(G3*((iac**4.)*aux96))))+(32.*((G1**2)*((iac**2)*((-32.*((G2**4.)*(iac**8.)))+aux104))))
    aux106=(-4.*(((G3**4.)*((iac**12.)*aux79))+((32.*aux82)+(256.*aux87))))+aux105
    aux107=((0.+8.j)*aux74)+(((G2**2)*((iac**4.)*((175.*((G3**4.)*(iac**12.)))+aux78)))+aux106)
    aux108=(-32.*((G2**4.)*((iac**8.)*((15.*((G3**2)*(iac**6.)))+(2.*aux69)))))+aux107
    aux109=(512.*((G1**3.)*(G3*((iac**6.)*aux64))))+((256.*((G1**4.)*aux66))+((32.*((G2**3.)*aux68))+aux108))
    aux110=(320.*((G2**6.)*(iac**12.)))+(((0.+3200.j)*((G2**5.)*((iac**10.)*(((0.+2.j)*Delta)+k))))+aux109)
    output=(2.*(a0*((iac**3.)*((256.*aux0)+aux62))))/aux110
    return output
